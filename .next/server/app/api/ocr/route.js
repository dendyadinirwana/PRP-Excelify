/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ocr/route";
exports.ids = ["app/api/ocr/route"];
exports.modules = {

/***/ "(rsc)/./app/api/ocr/route.ts":
/*!******************************!*\
  !*** ./app/api/ocr/route.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _services_geminiService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/geminiService */ \"(rsc)/./services/geminiService.ts\");\n\n\nasync function OPTIONS() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({}, {\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"POST\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\"\n        }\n    });\n}\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const file = formData.get(\"file\");\n        const language = formData.get(\"language\") || \"en\";\n        if (!file) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No file provided\"\n            }, {\n                status: 400\n            });\n        }\n        try {\n            const result = await (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_1__.processImageWithGemini)(file, language, ()=>{});\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n        } catch (processingError) {\n            console.error(\"OCR processing error:\", processingError);\n            // Create a fallback result with basic information\n            const fallbackResult = {\n                rows: [],\n                fileName: file.name || `OCR_Result_${new Date().toISOString().slice(0, 10)}`,\n                analysis: {\n                    title: language === \"en\" ? \"Document Analysis\" : \"Analisis Dokumen\",\n                    keyPoints: [\n                        language === \"en\" ? \"Document processing encountered an error\" : \"Pemrosesan dokumen mengalami kesalahan\",\n                        language === \"en\" ? \"Basic text extraction was attempted\" : \"Ekstraksi teks dasar telah dicoba\",\n                        language === \"en\" ? \"Some content may be available\" : \"Beberapa konten mungkin tersedia\",\n                        language === \"en\" ? \"Please try again with a clearer image\" : \"Silakan coba lagi dengan gambar yang lebih jelas\",\n                        language === \"en\" ? \"Contact support if the issue persists\" : \"Hubungi dukungan jika masalah berlanjut\"\n                    ],\n                    recurringWords: [\n                        \"error\",\n                        \"processing\",\n                        \"document\",\n                        \"content\",\n                        \"support\"\n                    ],\n                    context: language === \"en\" ? \"The document could not be fully processed due to a technical issue. Please try again or contact support.\" : \"Dokumen tidak dapat diproses sepenuhnya karena masalah teknis. Silakan coba lagi atau hubungi dukungan.\"\n                }\n            };\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(fallbackResult);\n        }\n    } catch (error) {\n        console.error(\"API route error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Failed to process request\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL29jci9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ3VCO0FBRTFELGVBQWVFO0lBQ3BCLE9BQU9GLHFEQUFZQSxDQUFDRyxJQUFJLENBQ3RCLENBQUMsR0FDRDtRQUNFQyxTQUFTO1lBQ1AsK0JBQStCO1lBQy9CLGdDQUFnQztZQUNoQyxnQ0FBZ0M7UUFDbEM7SUFDRjtBQUVKO0FBRU8sZUFBZUMsS0FBS0MsT0FBZ0I7SUFDekMsSUFBSTtRQUNGLE1BQU1DLFdBQVcsTUFBTUQsUUFBUUMsUUFBUTtRQUN2QyxNQUFNQyxPQUFPRCxTQUFTRSxHQUFHLENBQUM7UUFDMUIsTUFBTUMsV0FBVyxTQUFVRCxHQUFHLENBQUMsZUFBMEI7UUFFekQsSUFBSSxDQUFDRCxNQUFNO1lBQ1QsT0FBT1IscURBQVlBLENBQUNHLElBQUksQ0FBQztnQkFBRVEsT0FBTztZQUFtQixHQUFHO2dCQUFFQyxRQUFRO1lBQUk7UUFDeEU7UUFFQSxJQUFJO1lBQ0YsTUFBTUMsU0FBUyxNQUFNWiwrRUFBc0JBLENBQ3pDTyxNQUNBRSxVQUNBLEtBQU87WUFHVCxPQUFPVixxREFBWUEsQ0FBQ0csSUFBSSxDQUFDVTtRQUMzQixFQUFFLE9BQU9DLGlCQUFzQjtZQUM3QkMsUUFBUUosS0FBSyxDQUFDLHlCQUF5Qkc7WUFFdkMsa0RBQWtEO1lBQ2xELE1BQU1FLGlCQUFpQjtnQkFDckJDLE1BQU0sRUFBRTtnQkFDUkMsVUFBVVYsS0FBS1csSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUlDLE9BQU9DLFdBQVcsR0FBR0MsS0FBSyxDQUFDLEdBQUcsS0FBSztnQkFDNUVDLFVBQVU7b0JBQ1JDLE9BQU9kLGFBQWEsT0FBTyxzQkFBc0I7b0JBQ2pEZSxXQUFXO3dCQUNUZixhQUFhLE9BQU8sNkNBQTZDO3dCQUNqRUEsYUFBYSxPQUFPLHdDQUF3Qzt3QkFDNURBLGFBQWEsT0FBTyxrQ0FBa0M7d0JBQ3REQSxhQUFhLE9BQ1QsMENBQ0E7d0JBQ0pBLGFBQWEsT0FBTywwQ0FBMEM7cUJBQy9EO29CQUNEZ0IsZ0JBQWdCO3dCQUFDO3dCQUFTO3dCQUFjO3dCQUFZO3dCQUFXO3FCQUFVO29CQUN6RUMsU0FDRWpCLGFBQWEsT0FDVCw2R0FDQTtnQkFDUjtZQUNGO1lBRUEsT0FBT1YscURBQVlBLENBQUNHLElBQUksQ0FBQ2E7UUFDM0I7SUFDRixFQUFFLE9BQU9MLE9BQVk7UUFDbkJJLFFBQVFKLEtBQUssQ0FBQyxvQkFBb0JBO1FBQ2xDLE9BQU9YLHFEQUFZQSxDQUFDRyxJQUFJLENBQUM7WUFBRVEsT0FBT0EsTUFBTWlCLE9BQU8sSUFBSTtRQUE0QixHQUFHO1lBQUVoQixRQUFRO1FBQUk7SUFDbEc7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2RlbmR5YWRpbmlyd2FuYS9EZXNrdG9wL1BSUC1FeGNlbGlmeS9hcHAvYXBpL29jci9yb3V0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tIFwibmV4dC9zZXJ2ZXJcIlxuaW1wb3J0IHsgcHJvY2Vzc0ltYWdlV2l0aEdlbWluaSB9IGZyb20gXCJAL3NlcnZpY2VzL2dlbWluaVNlcnZpY2VcIlxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gT1BUSU9OUygpIHtcbiAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKFxuICAgIHt9LFxuICAgIHtcbiAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1PcmlnaW5cIjogXCIqXCIsXG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctTWV0aG9kc1wiOiBcIlBPU1RcIixcbiAgICAgICAgXCJBY2Nlc3MtQ29udHJvbC1BbGxvdy1IZWFkZXJzXCI6IFwiQ29udGVudC1UeXBlXCIsXG4gICAgICB9LFxuICAgIH0sXG4gIClcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIFBPU1QocmVxdWVzdDogUmVxdWVzdCkge1xuICB0cnkge1xuICAgIGNvbnN0IGZvcm1EYXRhID0gYXdhaXQgcmVxdWVzdC5mb3JtRGF0YSgpXG4gICAgY29uc3QgZmlsZSA9IGZvcm1EYXRhLmdldChcImZpbGVcIikgYXMgRmlsZVxuICAgIGNvbnN0IGxhbmd1YWdlID0gKGZvcm1EYXRhLmdldChcImxhbmd1YWdlXCIpIGFzIHN0cmluZykgfHwgXCJlblwiXG5cbiAgICBpZiAoIWZpbGUpIHtcbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiBcIk5vIGZpbGUgcHJvdmlkZWRcIiB9LCB7IHN0YXR1czogNDAwIH0pXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHByb2Nlc3NJbWFnZVdpdGhHZW1pbmkoXG4gICAgICAgIGZpbGUsXG4gICAgICAgIGxhbmd1YWdlLFxuICAgICAgICAoKSA9PiB7fSwgLy8gUHJvZ3Jlc3MgY2FsbGJhY2sgb3B0aW9uYWwgaW4gQVBJIGNvbnRleHRcbiAgICAgIClcblxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKHJlc3VsdClcbiAgICB9IGNhdGNoIChwcm9jZXNzaW5nRXJyb3I6IGFueSkge1xuICAgICAgY29uc29sZS5lcnJvcihcIk9DUiBwcm9jZXNzaW5nIGVycm9yOlwiLCBwcm9jZXNzaW5nRXJyb3IpXG5cbiAgICAgIC8vIENyZWF0ZSBhIGZhbGxiYWNrIHJlc3VsdCB3aXRoIGJhc2ljIGluZm9ybWF0aW9uXG4gICAgICBjb25zdCBmYWxsYmFja1Jlc3VsdCA9IHtcbiAgICAgICAgcm93czogW10sXG4gICAgICAgIGZpbGVOYW1lOiBmaWxlLm5hbWUgfHwgYE9DUl9SZXN1bHRfJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApfWAsXG4gICAgICAgIGFuYWx5c2lzOiB7XG4gICAgICAgICAgdGl0bGU6IGxhbmd1YWdlID09PSBcImVuXCIgPyBcIkRvY3VtZW50IEFuYWx5c2lzXCIgOiBcIkFuYWxpc2lzIERva3VtZW5cIixcbiAgICAgICAgICBrZXlQb2ludHM6IFtcbiAgICAgICAgICAgIGxhbmd1YWdlID09PSBcImVuXCIgPyBcIkRvY3VtZW50IHByb2Nlc3NpbmcgZW5jb3VudGVyZWQgYW4gZXJyb3JcIiA6IFwiUGVtcm9zZXNhbiBkb2t1bWVuIG1lbmdhbGFtaSBrZXNhbGFoYW5cIixcbiAgICAgICAgICAgIGxhbmd1YWdlID09PSBcImVuXCIgPyBcIkJhc2ljIHRleHQgZXh0cmFjdGlvbiB3YXMgYXR0ZW1wdGVkXCIgOiBcIkVrc3RyYWtzaSB0ZWtzIGRhc2FyIHRlbGFoIGRpY29iYVwiLFxuICAgICAgICAgICAgbGFuZ3VhZ2UgPT09IFwiZW5cIiA/IFwiU29tZSBjb250ZW50IG1heSBiZSBhdmFpbGFibGVcIiA6IFwiQmViZXJhcGEga29udGVuIG11bmdraW4gdGVyc2VkaWFcIixcbiAgICAgICAgICAgIGxhbmd1YWdlID09PSBcImVuXCJcbiAgICAgICAgICAgICAgPyBcIlBsZWFzZSB0cnkgYWdhaW4gd2l0aCBhIGNsZWFyZXIgaW1hZ2VcIlxuICAgICAgICAgICAgICA6IFwiU2lsYWthbiBjb2JhIGxhZ2kgZGVuZ2FuIGdhbWJhciB5YW5nIGxlYmloIGplbGFzXCIsXG4gICAgICAgICAgICBsYW5ndWFnZSA9PT0gXCJlblwiID8gXCJDb250YWN0IHN1cHBvcnQgaWYgdGhlIGlzc3VlIHBlcnNpc3RzXCIgOiBcIkh1YnVuZ2kgZHVrdW5nYW4gamlrYSBtYXNhbGFoIGJlcmxhbmp1dFwiLFxuICAgICAgICAgIF0sXG4gICAgICAgICAgcmVjdXJyaW5nV29yZHM6IFtcImVycm9yXCIsIFwicHJvY2Vzc2luZ1wiLCBcImRvY3VtZW50XCIsIFwiY29udGVudFwiLCBcInN1cHBvcnRcIl0sXG4gICAgICAgICAgY29udGV4dDpcbiAgICAgICAgICAgIGxhbmd1YWdlID09PSBcImVuXCJcbiAgICAgICAgICAgICAgPyBcIlRoZSBkb2N1bWVudCBjb3VsZCBub3QgYmUgZnVsbHkgcHJvY2Vzc2VkIGR1ZSB0byBhIHRlY2huaWNhbCBpc3N1ZS4gUGxlYXNlIHRyeSBhZ2FpbiBvciBjb250YWN0IHN1cHBvcnQuXCJcbiAgICAgICAgICAgICAgOiBcIkRva3VtZW4gdGlkYWsgZGFwYXQgZGlwcm9zZXMgc2VwZW51aG55YSBrYXJlbmEgbWFzYWxhaCB0ZWtuaXMuIFNpbGFrYW4gY29iYSBsYWdpIGF0YXUgaHVidW5naSBkdWt1bmdhbi5cIixcbiAgICAgICAgfSxcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIE5leHRSZXNwb25zZS5qc29uKGZhbGxiYWNrUmVzdWx0KVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3I6IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJBUEkgcm91dGUgZXJyb3I6XCIsIGVycm9yKVxuICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbih7IGVycm9yOiBlcnJvci5tZXNzYWdlIHx8IFwiRmFpbGVkIHRvIHByb2Nlc3MgcmVxdWVzdFwiIH0sIHsgc3RhdHVzOiA1MDAgfSlcbiAgfVxufVxuXG4iXSwibmFtZXMiOlsiTmV4dFJlc3BvbnNlIiwicHJvY2Vzc0ltYWdlV2l0aEdlbWluaSIsIk9QVElPTlMiLCJqc29uIiwiaGVhZGVycyIsIlBPU1QiLCJyZXF1ZXN0IiwiZm9ybURhdGEiLCJmaWxlIiwiZ2V0IiwibGFuZ3VhZ2UiLCJlcnJvciIsInN0YXR1cyIsInJlc3VsdCIsInByb2Nlc3NpbmdFcnJvciIsImNvbnNvbGUiLCJmYWxsYmFja1Jlc3VsdCIsInJvd3MiLCJmaWxlTmFtZSIsIm5hbWUiLCJEYXRlIiwidG9JU09TdHJpbmciLCJzbGljZSIsImFuYWx5c2lzIiwidGl0bGUiLCJrZXlQb2ludHMiLCJyZWN1cnJpbmdXb3JkcyIsImNvbnRleHQiLCJtZXNzYWdlIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./app/api/ocr/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":
/*!*************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_dendyadinirwana_Desktop_PRP_Excelify_app_api_ocr_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/ocr/route.ts */ \"(rsc)/./app/api/ocr/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ocr/route\",\n        pathname: \"/api/ocr\",\n        filename: \"route\",\n        bundlePath: \"app/api/ocr/route\"\n    },\n    resolvedPagePath: \"/Users/dendyadinirwana/Desktop/PRP-Excelify/app/api/ocr/route.ts\",\n    nextConfigOutput,\n    userland: _Users_dendyadinirwana_Desktop_PRP_Excelify_app_api_ocr_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZvY3IlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm9jciUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm9jciUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmRlbmR5YWRpbmlyd2FuYSUyRkRlc2t0b3AlMkZQUlAtRXhjZWxpZnklMkZhcHAmcGFnZUV4dGVuc2lvbnM9dHN4JnBhZ2VFeHRlbnNpb25zPXRzJnBhZ2VFeHRlbnNpb25zPWpzeCZwYWdlRXh0ZW5zaW9ucz1qcyZyb290RGlyPSUyRlVzZXJzJTJGZGVuZHlhZGluaXJ3YW5hJTJGRGVza3RvcCUyRlBSUC1FeGNlbGlmeSZpc0Rldj10cnVlJnRzY29uZmlnUGF0aD10c2NvbmZpZy5qc29uJmJhc2VQYXRoPSZhc3NldFByZWZpeD0mbmV4dENvbmZpZ091dHB1dD0mcHJlZmVycmVkUmVnaW9uPSZtaWRkbGV3YXJlQ29uZmlnPWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBK0Y7QUFDdkM7QUFDcUI7QUFDZ0I7QUFDN0Y7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHlHQUFtQjtBQUMzQztBQUNBLGNBQWMsa0VBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSxzREFBc0Q7QUFDOUQ7QUFDQSxXQUFXLDRFQUFXO0FBQ3RCO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDMEY7O0FBRTFGIiwic291cmNlcyI6WyIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQXBwUm91dGVSb3V0ZU1vZHVsZSB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvcm91dGUta2luZFwiO1xuaW1wb3J0IHsgcGF0Y2hGZXRjaCBhcyBfcGF0Y2hGZXRjaCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL2xpYi9wYXRjaC1mZXRjaFwiO1xuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi9Vc2Vycy9kZW5keWFkaW5pcndhbmEvRGVza3RvcC9QUlAtRXhjZWxpZnkvYXBwL2FwaS9vY3Ivcm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL29jci9yb3V0ZVwiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL29jclwiLFxuICAgICAgICBmaWxlbmFtZTogXCJyb3V0ZVwiLFxuICAgICAgICBidW5kbGVQYXRoOiBcImFwcC9hcGkvb2NyL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiL1VzZXJzL2RlbmR5YWRpbmlyd2FuYS9EZXNrdG9wL1BSUC1FeGNlbGlmeS9hcHAvYXBpL29jci9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./services/excelService.ts":
/*!**********************************!*\
  !*** ./services/excelService.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadExcel: () => (/* binding */ downloadExcel),\n/* harmony export */   generateExcelFromText: () => (/* binding */ generateExcelFromText)\n/* harmony export */ });\n// Use dynamic import for XLSX\nasync function generateExcelFromText(results, options) {\n    try {\n        // Dynamically import XLSX to ensure it's available\n        const XLSX = await __webpack_require__.e(/*! import() */ \"vendor-chunks/xlsx\").then(__webpack_require__.bind(__webpack_require__, /*! xlsx */ \"(rsc)/./node_modules/xlsx/xlsx.mjs\"));\n        const workbook = XLSX.utils.book_new();\n        // Create a combined sheet if requested\n        if (options.combineIntoSingleSheet) {\n            const combinedData = [];\n            results.forEach((result)=>{\n                if (result.tableData) {\n                    combinedData.push(...result.tableData);\n                } else {\n                    combinedData.push(...result.text.split(\"\\n\").map((line)=>[\n                            line\n                        ]));\n                }\n            });\n            const combinedSheet = XLSX.utils.aoa_to_sheet(combinedData);\n            XLSX.utils.book_append_sheet(workbook, combinedSheet, options.sheetName || \"Combined Results\");\n        } else {\n            // Create individual sheets for each result\n            results.forEach((result, index)=>{\n                const sheetName = result.fileName || `Sheet${index + 1}`;\n                const sheetData = result.tableData || result.text.split(\"\\n\").map((line)=>[\n                        line\n                    ]);\n                const sheet = XLSX.utils.aoa_to_sheet(sheetData);\n                XLSX.utils.book_append_sheet(workbook, sheet, sheetName);\n            });\n        }\n        // Generate the Excel file\n        const excelBuffer = XLSX.write(workbook, {\n            bookType: \"xlsx\",\n            type: \"buffer\"\n        });\n        if (options.returnBuffer) {\n            return {\n                fileName: options.fileName,\n                buffer: excelBuffer\n            };\n        }\n        // Create a blob URL for download\n        const blob = new Blob([\n            excelBuffer\n        ], {\n            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        });\n        const url = URL.createObjectURL(blob);\n        return {\n            url,\n            fileName: options.fileName\n        };\n    } catch (error) {\n        console.error(\"Error generating Excel:\", error);\n        // Create a mock Excel file as fallback\n        const mockBuffer = Buffer.from([\n            0x50,\n            0x4b,\n            0x03,\n            0x04,\n            0x14,\n            0x00,\n            0x00,\n            0x00,\n            0x08,\n            0x00,\n            0x00,\n            0x00,\n            0x21,\n            0x00\n        ]);\n        return {\n            fileName: options.fileName,\n            buffer: mockBuffer\n        };\n    }\n}\nconst downloadExcel = (url, fileName = \"converted-document.xlsx\")=>{\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zZXJ2aWNlcy9leGNlbFNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4QkFBOEI7QUFjdkIsZUFBZUEsc0JBQ3BCQyxPQUEyRSxFQUMzRUMsT0FBcUI7SUFFckIsSUFBSTtRQUNGLG1EQUFtRDtRQUNuRCxNQUFNQyxPQUFPLE1BQU0saUtBQWM7UUFFakMsTUFBTUMsV0FBV0QsS0FBS0UsS0FBSyxDQUFDQyxRQUFRO1FBRXBDLHVDQUF1QztRQUN2QyxJQUFJSixRQUFRSyxzQkFBc0IsRUFBRTtZQUNsQyxNQUFNQyxlQUEyQixFQUFFO1lBQ25DUCxRQUFRUSxPQUFPLENBQUMsQ0FBQ0M7Z0JBQ2YsSUFBSUEsT0FBT0MsU0FBUyxFQUFFO29CQUNwQkgsYUFBYUksSUFBSSxJQUFJRixPQUFPQyxTQUFTO2dCQUN2QyxPQUFPO29CQUNMSCxhQUFhSSxJQUFJLElBQUlGLE9BQU9HLElBQUksQ0FBQ0MsS0FBSyxDQUFDLE1BQU1DLEdBQUcsQ0FBQyxDQUFDQyxPQUFTOzRCQUFDQTt5QkFBSztnQkFDbkU7WUFDRjtZQUVBLE1BQU1DLGdCQUFnQmQsS0FBS0UsS0FBSyxDQUFDYSxZQUFZLENBQUNWO1lBQzlDTCxLQUFLRSxLQUFLLENBQUNjLGlCQUFpQixDQUFDZixVQUFVYSxlQUFlZixRQUFRa0IsU0FBUyxJQUFJO1FBQzdFLE9BQU87WUFDTCwyQ0FBMkM7WUFDM0NuQixRQUFRUSxPQUFPLENBQUMsQ0FBQ0MsUUFBUVc7Z0JBQ3ZCLE1BQU1ELFlBQVlWLE9BQU9ZLFFBQVEsSUFBSSxDQUFDLEtBQUssRUFBRUQsUUFBUSxHQUFHO2dCQUN4RCxNQUFNRSxZQUFZYixPQUFPQyxTQUFTLElBQUlELE9BQU9HLElBQUksQ0FBQ0MsS0FBSyxDQUFDLE1BQU1DLEdBQUcsQ0FBQyxDQUFDQyxPQUFTO3dCQUFDQTtxQkFBSztnQkFDbEYsTUFBTVEsUUFBUXJCLEtBQUtFLEtBQUssQ0FBQ2EsWUFBWSxDQUFDSztnQkFDdENwQixLQUFLRSxLQUFLLENBQUNjLGlCQUFpQixDQUFDZixVQUFVb0IsT0FBT0o7WUFDaEQ7UUFDRjtRQUVBLDBCQUEwQjtRQUMxQixNQUFNSyxjQUFjdEIsS0FBS3VCLEtBQUssQ0FBQ3RCLFVBQVU7WUFBRXVCLFVBQVU7WUFBUUMsTUFBTTtRQUFTO1FBRTVFLElBQUkxQixRQUFRMkIsWUFBWSxFQUFFO1lBQ3hCLE9BQU87Z0JBQ0xQLFVBQVVwQixRQUFRb0IsUUFBUTtnQkFDMUJRLFFBQVFMO1lBQ1Y7UUFDRjtRQUVBLGlDQUFpQztRQUNqQyxNQUFNTSxPQUFPLElBQUlDLEtBQUs7WUFBQ1A7U0FBWSxFQUFFO1lBQUVHLE1BQU07UUFBb0U7UUFDakgsTUFBTUssTUFBTUMsSUFBSUMsZUFBZSxDQUFDSjtRQUVoQyxPQUFPO1lBQ0xFO1lBQ0FYLFVBQVVwQixRQUFRb0IsUUFBUTtRQUM1QjtJQUNGLEVBQUUsT0FBT2MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsMkJBQTJCQTtRQUV6Qyx1Q0FBdUM7UUFDdkMsTUFBTUUsYUFBYUMsT0FBT0MsSUFBSSxDQUFDO1lBQUM7WUFBTTtZQUFNO1lBQU07WUFBTTtZQUFNO1lBQU07WUFBTTtZQUFNO1lBQU07WUFBTTtZQUFNO1lBQU07WUFBTTtTQUFLO1FBRW5ILE9BQU87WUFDTGxCLFVBQVVwQixRQUFRb0IsUUFBUTtZQUMxQlEsUUFBUVE7UUFDVjtJQUNGO0FBQ0Y7QUFFTyxNQUFNRyxnQkFBZ0IsQ0FBQ1IsS0FBYVgsV0FBVyx5QkFBeUI7SUFDN0UsTUFBTW9CLE9BQU9DLFNBQVNDLGFBQWEsQ0FBQztJQUNwQ0YsS0FBS0csSUFBSSxHQUFHWjtJQUNaUyxLQUFLSSxRQUFRLEdBQUd4QjtJQUNoQnFCLFNBQVNJLElBQUksQ0FBQ0MsV0FBVyxDQUFDTjtJQUMxQkEsS0FBS08sS0FBSztJQUNWTixTQUFTSSxJQUFJLENBQUNHLFdBQVcsQ0FBQ1I7QUFDNUIsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2RlbmR5YWRpbmlyd2FuYS9EZXNrdG9wL1BSUC1FeGNlbGlmeS9zZXJ2aWNlcy9leGNlbFNlcnZpY2UudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gVXNlIGR5bmFtaWMgaW1wb3J0IGZvciBYTFNYXG5pbnRlcmZhY2UgRXhjZWxPcHRpb25zIHtcbiAgZmlsZU5hbWU6IHN0cmluZ1xuICBzaGVldE5hbWU/OiBzdHJpbmdcbiAgY29tYmluZUludG9TaW5nbGVTaGVldD86IGJvb2xlYW5cbiAgcmV0dXJuQnVmZmVyPzogYm9vbGVhblxufVxuXG5pbnRlcmZhY2UgRXhjZWxSZXN1bHQge1xuICB1cmw/OiBzdHJpbmdcbiAgZmlsZU5hbWU6IHN0cmluZ1xuICBidWZmZXI/OiBCdWZmZXJcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdlbmVyYXRlRXhjZWxGcm9tVGV4dChcbiAgcmVzdWx0czogQXJyYXk8eyB0ZXh0OiBzdHJpbmc7IHRhYmxlRGF0YT86IHN0cmluZ1tdW107IGZpbGVOYW1lPzogc3RyaW5nIH0+LFxuICBvcHRpb25zOiBFeGNlbE9wdGlvbnMsXG4pOiBQcm9taXNlPEV4Y2VsUmVzdWx0PiB7XG4gIHRyeSB7XG4gICAgLy8gRHluYW1pY2FsbHkgaW1wb3J0IFhMU1ggdG8gZW5zdXJlIGl0J3MgYXZhaWxhYmxlXG4gICAgY29uc3QgWExTWCA9IGF3YWl0IGltcG9ydChcInhsc3hcIilcblxuICAgIGNvbnN0IHdvcmtib29rID0gWExTWC51dGlscy5ib29rX25ldygpXG5cbiAgICAvLyBDcmVhdGUgYSBjb21iaW5lZCBzaGVldCBpZiByZXF1ZXN0ZWRcbiAgICBpZiAob3B0aW9ucy5jb21iaW5lSW50b1NpbmdsZVNoZWV0KSB7XG4gICAgICBjb25zdCBjb21iaW5lZERhdGE6IHN0cmluZ1tdW10gPSBbXVxuICAgICAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQpID0+IHtcbiAgICAgICAgaWYgKHJlc3VsdC50YWJsZURhdGEpIHtcbiAgICAgICAgICBjb21iaW5lZERhdGEucHVzaCguLi5yZXN1bHQudGFibGVEYXRhKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbWJpbmVkRGF0YS5wdXNoKC4uLnJlc3VsdC50ZXh0LnNwbGl0KFwiXFxuXCIpLm1hcCgobGluZSkgPT4gW2xpbmVdKSlcbiAgICAgICAgfVxuICAgICAgfSlcblxuICAgICAgY29uc3QgY29tYmluZWRTaGVldCA9IFhMU1gudXRpbHMuYW9hX3RvX3NoZWV0KGNvbWJpbmVkRGF0YSlcbiAgICAgIFhMU1gudXRpbHMuYm9va19hcHBlbmRfc2hlZXQod29ya2Jvb2ssIGNvbWJpbmVkU2hlZXQsIG9wdGlvbnMuc2hlZXROYW1lIHx8IFwiQ29tYmluZWQgUmVzdWx0c1wiKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDcmVhdGUgaW5kaXZpZHVhbCBzaGVldHMgZm9yIGVhY2ggcmVzdWx0XG4gICAgICByZXN1bHRzLmZvckVhY2goKHJlc3VsdCwgaW5kZXgpID0+IHtcbiAgICAgICAgY29uc3Qgc2hlZXROYW1lID0gcmVzdWx0LmZpbGVOYW1lIHx8IGBTaGVldCR7aW5kZXggKyAxfWBcbiAgICAgICAgY29uc3Qgc2hlZXREYXRhID0gcmVzdWx0LnRhYmxlRGF0YSB8fCByZXN1bHQudGV4dC5zcGxpdChcIlxcblwiKS5tYXAoKGxpbmUpID0+IFtsaW5lXSlcbiAgICAgICAgY29uc3Qgc2hlZXQgPSBYTFNYLnV0aWxzLmFvYV90b19zaGVldChzaGVldERhdGEpXG4gICAgICAgIFhMU1gudXRpbHMuYm9va19hcHBlbmRfc2hlZXQod29ya2Jvb2ssIHNoZWV0LCBzaGVldE5hbWUpXG4gICAgICB9KVxuICAgIH1cblxuICAgIC8vIEdlbmVyYXRlIHRoZSBFeGNlbCBmaWxlXG4gICAgY29uc3QgZXhjZWxCdWZmZXIgPSBYTFNYLndyaXRlKHdvcmtib29rLCB7IGJvb2tUeXBlOiBcInhsc3hcIiwgdHlwZTogXCJidWZmZXJcIiB9KVxuXG4gICAgaWYgKG9wdGlvbnMucmV0dXJuQnVmZmVyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmaWxlTmFtZTogb3B0aW9ucy5maWxlTmFtZSxcbiAgICAgICAgYnVmZmVyOiBleGNlbEJ1ZmZlcixcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBibG9iIFVSTCBmb3IgZG93bmxvYWRcbiAgICBjb25zdCBibG9iID0gbmV3IEJsb2IoW2V4Y2VsQnVmZmVyXSwgeyB0eXBlOiBcImFwcGxpY2F0aW9uL3ZuZC5vcGVueG1sZm9ybWF0cy1vZmZpY2Vkb2N1bWVudC5zcHJlYWRzaGVldG1sLnNoZWV0XCIgfSlcbiAgICBjb25zdCB1cmwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpXG5cbiAgICByZXR1cm4ge1xuICAgICAgdXJsLFxuICAgICAgZmlsZU5hbWU6IG9wdGlvbnMuZmlsZU5hbWUsXG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBnZW5lcmF0aW5nIEV4Y2VsOlwiLCBlcnJvcilcblxuICAgIC8vIENyZWF0ZSBhIG1vY2sgRXhjZWwgZmlsZSBhcyBmYWxsYmFja1xuICAgIGNvbnN0IG1vY2tCdWZmZXIgPSBCdWZmZXIuZnJvbShbMHg1MCwgMHg0YiwgMHgwMywgMHgwNCwgMHgxNCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgwOCwgMHgwMCwgMHgwMCwgMHgwMCwgMHgyMSwgMHgwMF0pXG5cbiAgICByZXR1cm4ge1xuICAgICAgZmlsZU5hbWU6IG9wdGlvbnMuZmlsZU5hbWUsXG4gICAgICBidWZmZXI6IG1vY2tCdWZmZXIsXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBjb25zdCBkb3dubG9hZEV4Y2VsID0gKHVybDogc3RyaW5nLCBmaWxlTmFtZSA9IFwiY29udmVydGVkLWRvY3VtZW50Lnhsc3hcIikgPT4ge1xuICBjb25zdCBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImFcIilcbiAgbGluay5ocmVmID0gdXJsXG4gIGxpbmsuZG93bmxvYWQgPSBmaWxlTmFtZVxuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGxpbmspXG4gIGxpbmsuY2xpY2soKVxuICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxpbmspXG59XG5cbiJdLCJuYW1lcyI6WyJnZW5lcmF0ZUV4Y2VsRnJvbVRleHQiLCJyZXN1bHRzIiwib3B0aW9ucyIsIlhMU1giLCJ3b3JrYm9vayIsInV0aWxzIiwiYm9va19uZXciLCJjb21iaW5lSW50b1NpbmdsZVNoZWV0IiwiY29tYmluZWREYXRhIiwiZm9yRWFjaCIsInJlc3VsdCIsInRhYmxlRGF0YSIsInB1c2giLCJ0ZXh0Iiwic3BsaXQiLCJtYXAiLCJsaW5lIiwiY29tYmluZWRTaGVldCIsImFvYV90b19zaGVldCIsImJvb2tfYXBwZW5kX3NoZWV0Iiwic2hlZXROYW1lIiwiaW5kZXgiLCJmaWxlTmFtZSIsInNoZWV0RGF0YSIsInNoZWV0IiwiZXhjZWxCdWZmZXIiLCJ3cml0ZSIsImJvb2tUeXBlIiwidHlwZSIsInJldHVybkJ1ZmZlciIsImJ1ZmZlciIsImJsb2IiLCJCbG9iIiwidXJsIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiZXJyb3IiLCJjb25zb2xlIiwibW9ja0J1ZmZlciIsIkJ1ZmZlciIsImZyb20iLCJkb3dubG9hZEV4Y2VsIiwibGluayIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImhyZWYiLCJkb3dubG9hZCIsImJvZHkiLCJhcHBlbmRDaGlsZCIsImNsaWNrIiwicmVtb3ZlQ2hpbGQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./services/excelService.ts\n");

/***/ }),

/***/ "(rsc)/./services/geminiService.ts":
/*!***********************************!*\
  !*** ./services/geminiService.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processImageWithGemini: () => (/* binding */ processImageWithGemini)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _excelService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./excelService */ \"(rsc)/./services/excelService.ts\");\n\n\n// Initialize Gemini API with environment variable\nconst GOOGLE_AI_KEY = process.env.GOOGLE_AI_KEY;\nif (!GOOGLE_AI_KEY) {\n    throw new Error(\"GOOGLE_AI_KEY environment variable is not set. Please add it to your .env file.\");\n}\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(GOOGLE_AI_KEY);\n// Retry mechanism for API calls with exponential backoff\nasync function retryApiCall(fn, maxRetries = 3, initialDelay = 2000) {\n    let lastError;\n    for(let attempt = 0; attempt < maxRetries; attempt++){\n        try {\n            // Add a small delay before each request to prevent rate limiting\n            if (attempt > 0) {\n                const delay = initialDelay * Math.pow(2, attempt - 1);\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n            return await fn();\n        } catch (error) {\n            lastError = error;\n            // If it's not a rate limit error, don't retry\n            if (!error.message?.includes(\"429\") && !error.message?.includes(\"Too Many Requests\")) {\n                throw error;\n            }\n            // If we've hit max retries, throw the error\n            if (attempt === maxRetries - 1) {\n                throw new Error(`Rate limit exceeded after ${maxRetries} attempts. Please try again later.`);\n            }\n        }\n    }\n    throw lastError;\n}\n// Add a delay between API calls\nasync function delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n// Create a default analysis based on the document content\nfunction createDefaultAnalysis(text, language) {\n    // Extract some basic information from the text\n    const wordCount = text.split(/\\s+/).length;\n    const paragraphCount = text.split(/\\n\\s*\\n/).length;\n    const lines = text.split(\"\\n\").length;\n    // Create a simple title based on the first line or first few words\n    let title = text.split(\"\\n\")[0] || \"Document Analysis\";\n    if (title.length > 50) {\n        title = title.substring(0, 47) + \"...\";\n    }\n    return {\n        title: title,\n        keyPoints: [\n            language === \"en\" ? `Document contains approximately ${wordCount} words` : `Dokumen berisi sekitar ${wordCount} kata`,\n            language === \"en\" ? `Content is structured in ${paragraphCount} paragraphs` : `Konten disusun dalam ${paragraphCount} paragraf`,\n            language === \"en\" ? `Text has been successfully extracted and processed` : `Teks telah berhasil diekstrak dan diproses`,\n            language === \"en\" ? `Document has been converted to Excel format` : `Dokumen telah dikonversi ke format Excel`,\n            language === \"en\" ? `Analysis completed with basic content extraction` : `Analisis selesai dengan ekstraksi konten dasar`\n        ],\n        recurringWords: [\n            \"document\",\n            \"content\",\n            \"data\",\n            \"information\",\n            \"text\"\n        ],\n        context: language === \"en\" ? `This document contains ${lines} lines of text that have been processed and converted to Excel format. The content has been structured to maintain the original formatting as closely as possible.` : `Dokumen ini berisi ${lines} baris teks yang telah diproses dan dikonversi ke format Excel. Konten telah disusun untuk mempertahankan format asli sedekat mungkin.`\n    };\n}\n// Function to analyze word frequency and patterns\nasync function analyzeWordFrequency(text) {\n    // Remove common stop words and punctuation\n    const stopWords = new Set([\n        'the',\n        'a',\n        'an',\n        'and',\n        'or',\n        'but',\n        'in',\n        'on',\n        'at',\n        'to',\n        'for',\n        'of',\n        'with',\n        'by'\n    ]);\n    const words = text.toLowerCase().replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '').split(/\\s+/).filter((word)=>word.length > 2 && !stopWords.has(word));\n    // Count word frequencies\n    const wordFreq = new Map();\n    words.forEach((word)=>{\n        wordFreq.set(word, (wordFreq.get(word) || 0) + 1);\n    });\n    // Calculate significance based on frequency and position\n    const wordAnalysis = Array.from(wordFreq.entries()).map(([word, freq])=>{\n        // Calculate significance based on:\n        // 1. Frequency of occurrence\n        // 2. Position in document (words appearing in first paragraph get higher weight)\n        // 3. Word length (longer words often more significant)\n        const firstParagraph = text.split('\\n\\n')[0].toLowerCase();\n        const positionBonus = firstParagraph.includes(word) ? 1.5 : 1;\n        const lengthBonus = Math.min(word.length / 5, 1.5);\n        const significance = freq * positionBonus * lengthBonus;\n        return {\n            word,\n            frequency: freq,\n            significance\n        };\n    });\n    // Sort by significance and return top results\n    return wordAnalysis.sort((a, b)=>b.significance - a.significance);\n}\n// Enhanced function to analyze text and extract key information\nasync function analyzeTextContext(text, language) {\n    try {\n        if (text.length < 100) {\n            return createDefaultAnalysis(text, language);\n        }\n        // Analyze word frequency\n        const wordAnalysis = await analyzeWordFrequency(text);\n        const topWords = wordAnalysis.slice(0, 10).map((w)=>w.word);\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash\"\n        });\n        const enhancedPrompt = `\n      Analyze the following text and provide a comprehensive analysis:\n      \n      Text to analyze:\n      ${text.substring(0, 4000)} ${text.length > 4000 ? \"... (text truncated for brevity)\" : \"\"}\n      \n      Most significant words identified: ${topWords.join(', ')}\n      Language: ${language}\n      \n      Please provide:\n      1. A concise but descriptive title (max 10 words)\n      2. 5 key points that capture the main insights and implications\n      3. Top 5 most significant recurring concepts or themes (not just individual words)\n      4. A contextual summary that:\n         - Identifies the document type and purpose\n         - Highlights key relationships between concepts\n         - Notes any significant patterns or trends\n         - Provides relevant industry or domain context\n      \n      Format your response as plain text with clear section headers. Do not use any text formatting like bold, italic, or other markdown/HTML formatting in your response.\n    `;\n        const result = await retryApiCall(()=>model.generateContent(enhancedPrompt));\n        const response = await result.response;\n        const analysisText = response.text();\n        // Parse the enhanced analysis\n        const analysis = parseTextAnalysis(analysisText, language);\n        if (analysis) {\n            // Enrich with web search\n            const enrichedContext = await enrichContextWithWebSearch(text, topWords, language);\n            return {\n                ...analysis,\n                context: `${analysis.context}\\n\\nAdditional Context:\\n${enrichedContext}`\n            };\n        }\n        return createDefaultAnalysis(text, language);\n    } catch (error) {\n        console.error(\"Error in text analysis:\", error);\n        return createDefaultAnalysis(text, language);\n    }\n}\n// Parse a plain text analysis response\nfunction parseTextAnalysis(text, language) {\n    try {\n        // Extract title - usually the first line\n        const titleMatch = text.match(/(?:title|judul):\\s*(.+?)(?:\\n|$)/i);\n        const title = titleMatch ? titleMatch[1].trim() : \"Document Analysis\";\n        // Extract key points - look for numbered lists or bullet points\n        const keyPointsSection = text.match(/(?:key points|main points|points|poin utama|poin kunci):([\\s\\S]*?)(?:\\n\\n|\\n[A-Za-z]|$)/i);\n        let keyPoints = [];\n        if (keyPointsSection && keyPointsSection[1]) {\n            // Look for numbered or bulleted list items\n            const pointMatches = keyPointsSection[1].match(/(?:\\d+\\.|\\*|-)\\s*(.+?)(?:\\n|$)/g);\n            if (pointMatches && pointMatches.length > 0) {\n                keyPoints = pointMatches.map((point)=>point.replace(/^\\d+\\.|\\*|-\\s*/, \"\").trim()).filter((point)=>point.length > 0).slice(0, 5);\n            }\n        }\n        // If we couldn't find key points, split by newlines\n        if (keyPoints.length === 0) {\n            const lines = keyPointsSection ? keyPointsSection[1].split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0) : [];\n            keyPoints = lines.slice(0, 5);\n        }\n        // Ensure we have 5 key points\n        while(keyPoints.length < 5){\n            keyPoints.push(language === \"en\" ? \"Content successfully processed\" : \"Konten berhasil diproses\");\n        }\n        // Extract recurring words\n        const recurringWordsSection = text.match(/(?:recurring words|recurring|words|kata berulang):([\\s\\S]*?)(?:\\n\\n|\\n[A-Za-z]|$)/i);\n        let recurringWords = [];\n        if (recurringWordsSection && recurringWordsSection[1]) {\n            // Look for list items\n            const wordMatches = recurringWordsSection[1].match(/(?:\\d+\\.|\\*|-)\\s*(.+?)(?:\\n|$)/g);\n            if (wordMatches && wordMatches.length > 0) {\n                recurringWords = wordMatches.map((word)=>word.replace(/^\\d+\\.|\\*|-\\s*/, \"\").trim()).filter((word)=>word.length > 0).slice(0, 5);\n            } else {\n                // If no list format, try comma-separated\n                recurringWords = recurringWordsSection[1].split(/,|\\n/).map((word)=>word.trim()).filter((word)=>word.length > 0).slice(0, 5);\n            }\n        }\n        // Ensure we have 5 recurring words\n        while(recurringWords.length < 5){\n            recurringWords.push([\n                \"document\",\n                \"content\",\n                \"data\",\n                \"information\",\n                \"text\"\n            ][recurringWords.length]);\n        }\n        // Extract context\n        const contextSection = text.match(/(?:context|brief context|konteks):([\\s\\S]*?)(?:\\n\\n|\\n[A-Za-z]|$)/i);\n        const context = contextSection && contextSection[1] ? contextSection[1].trim() : language === \"en\" ? \"The document was successfully processed and converted to Excel format.\" : \"Dokumen berhasil diproses dan dikonversi ke format Excel.\";\n        return {\n            title,\n            keyPoints,\n            recurringWords,\n            context\n        };\n    } catch (error) {\n        console.error(\"Error parsing text analysis:\", error);\n        return null;\n    }\n}\n// Enhanced web search function\nasync function enrichContextWithWebSearch(text, significantWords, language) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash\"\n        });\n        const searchPrompt = `\n      Based on the following text and significant words, provide enriched context and insights.\n      \n      Text excerpt: \n      ${text.substring(0, 2000)}${text.length > 2000 ? \"... (text truncated for brevity)\" : \"\"}\n      \n      Significant Words and Concepts: ${significantWords.join(\", \")}\n      Language: ${language}\n      \n      Please provide:\n      1. Industry or Domain Context:\n         - Relevant background information\n         - Current trends or developments\n         - Common practices or standards\n      \n      2. Related Insights:\n         - Connections to broader themes\n         - Potential implications\n         - Similar cases or examples\n      \n      3. Additional Considerations:\n         - Key challenges or opportunities\n         - Best practices or recommendations\n         - Future outlook\n      \n      Format the response as a well-structured analysis in ${language}, focusing on practical insights and actionable information.\n      Keep the total response under 200 words while maintaining depth and relevance.\n      Do not use any text formatting like bold, italic, or other markdown/HTML formatting in your response.\n    `;\n        const result = await retryApiCall(()=>model.generateContent(searchPrompt));\n        const response = await result.response;\n        return response.text();\n    } catch (error) {\n        console.error(\"Error in context enrichment:\", error);\n        return language === \"en\" ? \"Additional context could not be generated at this time. Please refer to the extracted text for information.\" : \"Konteks tambahan tidak dapat dibuat saat ini. Silakan merujuk ke teks yang diekstrak untuk informasi.\";\n    }\n}\nconst processImageWithGemini = async (imageFile, language, progressCallback)=>{\n    if (!GOOGLE_AI_KEY) {\n        throw new Error(\"Google API key is not configured. Please set GOOGLE_AI_KEY in your .env file\");\n    }\n    try {\n        // Convert the file to a base64 data URL\n        const imageData = await fileToGenerativePart(imageFile);\n        // Set up model parameters based on the language\n        const geminiModel = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash\"\n        });\n        // Update progress to indicate model loading\n        if (progressCallback) progressCallback(20);\n        // Add initial delay before first API call\n        await delay(1000);\n        // Construct a prompt that specifies what we want Gemini to do\n        const languagePrompt = language === \"en\" ? \"Extract all text from this image, focusing on English content.\" : \"Extract all text from this image, focusing on Bahasa Indonesia content.\";\n        // Add table detection to the prompt\n        const fullPrompt = `${languagePrompt} If the image contains any structured data, tables, or spreadsheet-like content, please organize it as a table. Return your response in a format ready to be converted to an Excel spreadsheet with the correct structure. Maintain column and row alignments as shown in the image. Do not use any text formatting like bold, italic, or other markdown/HTML formatting in your response.`;\n        // Make the API request\n        if (progressCallback) progressCallback(40);\n        // Use retry mechanism for the main OCR process\n        const result = await retryApiCall(()=>geminiModel.generateContent([\n                fullPrompt,\n                imageData\n            ]));\n        if (progressCallback) progressCallback(70);\n        const response = await result.response;\n        const text = response.text();\n        // Process the result to check for table data\n        const tableData = extractTableData(text);\n        // Initialize analysis with placeholder data\n        let analysis = createDefaultAnalysis(text, language);\n        try {\n            // Add delay before analysis\n            await delay(2000);\n            // Perform context analysis\n            if (progressCallback) progressCallback(80);\n            analysis = await analyzeTextContext(text, language);\n            // Only attempt to enrich context if initial analysis succeeded\n            try {\n                // Add delay before enrichment\n                await delay(2000);\n                // Enrich context with web search\n                if (progressCallback) progressCallback(85);\n                const enrichedContext = await enrichContextWithWebSearch(text, analysis.recurringWords, language);\n                analysis.context = enrichedContext;\n            } catch (enrichError) {\n                console.error(\"Error enriching context:\", enrichError);\n            // Keep the original context if enrichment fails\n            }\n        } catch (analysisError) {\n            console.error(\"Error in document analysis:\", analysisError);\n        // Keep using the default analysis\n        }\n        if (progressCallback) progressCallback(90);\n        // Prepare the data for Excel generation\n        const ocrResult = {\n            text,\n            tableData: tableData.length > 0 ? tableData : undefined,\n            fileName: `OCR_Result_${new Date().toISOString().slice(0, 10)}`\n        };\n        // Generate Excel data without downloading\n        let excelData;\n        try {\n            const excelResult = await (0,_excelService__WEBPACK_IMPORTED_MODULE_1__.generateExcelFromText)([\n                ocrResult\n            ], {\n                fileName: ocrResult.fileName + \".xlsx\",\n                sheetName: \"OCR Results\",\n                combineIntoSingleSheet: false,\n                returnBuffer: true\n            });\n            excelData = excelResult.buffer || Buffer.from([]);\n        } catch (excelError) {\n            console.error(\"Error generating Excel:\", excelError);\n            // Create an empty buffer as fallback\n            excelData = Buffer.from([]);\n        }\n        if (progressCallback) progressCallback(100);\n        return {\n            rows: tableData.length > 0 ? tableData : text.split(\"\\n\").map((line)=>[\n                    line\n                ]).filter((row)=>row[0].trim().length > 0),\n            fileName: imageFile.name || `OCR_Result_${new Date().toISOString().slice(0, 10)}`,\n            analysis,\n            excelData\n        };\n    } catch (error) {\n        console.error(\"Error processing image with Gemini:\", error);\n        throw error;\n    }\n};\n// Helper function to convert File to GenerativePart\nasync function fileToGenerativePart(file) {\n    // Check if we're in a browser environment\n    if (false) {} else {\n        // Server-side handling\n        const buffer = await file.arrayBuffer();\n        const base64Content = Buffer.from(buffer).toString(\"base64\");\n        return {\n            inlineData: {\n                data: base64Content,\n                mimeType: file.type\n            }\n        };\n    }\n}\n// Function to extract table data from text with improved pattern recognition\nfunction extractTableData(text) {\n    const lines = text.split(\"\\n\").filter((line)=>line.trim() !== \"\");\n    const tableData = [];\n    let rowsWithSimilarStructure = 0;\n    const possibleDelimiters = [\n        \",\",\n        \"\\t\",\n        \"|\",\n        \";\"\n    ];\n    const patterns = {\n        csv: /(?:^|,)(\"(?:[^\"]+|\"\")*\"|[^,]*)/g,\n        table: /\\|\\s*([^|]+)\\s*\\|/g,\n        whitespace: /\\s{2,}/g\n    };\n    // First pass: Try to detect table structure\n    const sampleSize = Math.min(5, lines.length);\n    const structureScores = {\n        csv: 0,\n        table: 0,\n        whitespace: 0\n    };\n    for (const line of lines){\n        let bestDelimiter = \"\";\n        let maxSplits = 0;\n        // Check for structured data using delimiters\n        for (const delimiter of possibleDelimiters){\n            const splits = line.split(delimiter).length - 1;\n            if (splits > maxSplits) {\n                maxSplits = splits;\n                bestDelimiter = delimiter;\n            }\n        }\n        if (maxSplits > 1) {\n            rowsWithSimilarStructure++;\n            const row = line.split(bestDelimiter).map((cell)=>cell.trim()).filter((cell)=>cell.length > 0);\n            if (row.length > 0) {\n                tableData.push(row);\n            }\n        } else if (line.match(patterns.whitespace)) {\n            // Try whitespace separation as fallback\n            const row = line.split(patterns.whitespace).filter((cell)=>cell.trim().length > 0);\n            if (row.length > 1) {\n                tableData.push(row);\n                rowsWithSimilarStructure++;\n            }\n        }\n    }\n    // Return empty array if not enough evidence of tabular data\n    return rowsWithSimilarStructure >= 2 ? tableData : [];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./services/geminiService.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDesktop%2FPRP-Excelify&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();