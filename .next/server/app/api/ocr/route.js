/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/ocr/route";
exports.ids = ["app/api/ocr/route"];
exports.modules = {

/***/ "(rsc)/./app/api/ocr/route.ts":
/*!******************************!*\
  !*** ./app/api/ocr/route.ts ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OPTIONS: () => (/* binding */ OPTIONS),\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(rsc)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _services_geminiService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/services/geminiService */ \"(rsc)/./services/geminiService.ts\");\n\n\nasync function OPTIONS() {\n    return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({}, {\n        headers: {\n            \"Access-Control-Allow-Origin\": \"*\",\n            \"Access-Control-Allow-Methods\": \"POST\",\n            \"Access-Control-Allow-Headers\": \"Content-Type\"\n        }\n    });\n}\nasync function POST(request) {\n    try {\n        const formData = await request.formData();\n        const file = formData.get(\"file\");\n        const language = formData.get(\"language\") || \"en\";\n        if (!file) {\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n                error: \"No file provided\"\n            }, {\n                status: 400\n            });\n        }\n        try {\n            const result = await (0,_services_geminiService__WEBPACK_IMPORTED_MODULE_1__.processImageWithGemini)(file, language, ()=>{});\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(result);\n        } catch (processingError) {\n            console.error(\"OCR processing error:\", processingError);\n            // Create a fallback result with basic information\n            const fallbackResult = {\n                rows: [],\n                fileName: file.name || `OCR_Result_${new Date().toISOString().slice(0, 10)}`,\n                analysis: {\n                    title: language === \"en\" ? \"Document Analysis\" : \"Analisis Dokumen\",\n                    keyPoints: [\n                        language === \"en\" ? \"Document processing encountered an error\" : \"Pemrosesan dokumen mengalami kesalahan\",\n                        language === \"en\" ? \"Basic text extraction was attempted\" : \"Ekstraksi teks dasar telah dicoba\",\n                        language === \"en\" ? \"Some content may be available\" : \"Beberapa konten mungkin tersedia\",\n                        language === \"en\" ? \"Please try again with a clearer image\" : \"Silakan coba lagi dengan gambar yang lebih jelas\",\n                        language === \"en\" ? \"Contact support if the issue persists\" : \"Hubungi dukungan jika masalah berlanjut\"\n                    ],\n                    recurringWords: [\n                        \"error\",\n                        \"processing\",\n                        \"document\",\n                        \"content\",\n                        \"support\"\n                    ],\n                    context: language === \"en\" ? \"The document could not be fully processed due to a technical issue. Please try again or contact support.\" : \"Dokumen tidak dapat diproses sepenuhnya karena masalah teknis. Silakan coba lagi atau hubungi dukungan.\"\n                }\n            };\n            return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json(fallbackResult);\n        }\n    } catch (error) {\n        console.error(\"API route error:\", error);\n        return next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.json({\n            error: error.message || \"Failed to process request\"\n        }, {\n            status: 500\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9hcHAvYXBpL29jci9yb3V0ZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTBDO0FBQ3VCO0FBRTFELGVBQWVFO0lBQ3BCLE9BQU9GLHFEQUFZQSxDQUFDRyxJQUFJLENBQ3RCLENBQUMsR0FDRDtRQUNFQyxTQUFTO1lBQ1AsK0JBQStCO1lBQy9CLGdDQUFnQztZQUNoQyxnQ0FBZ0M7UUFDbEM7SUFDRjtBQUVKO0FBRU8sZUFBZUMsS0FBS0MsT0FBZ0I7SUFDekMsSUFBSTtRQUNGLE1BQU1DLFdBQVcsTUFBTUQsUUFBUUMsUUFBUTtRQUN2QyxNQUFNQyxPQUFPRCxTQUFTRSxHQUFHLENBQUM7UUFDMUIsTUFBTUMsV0FBVyxTQUFVRCxHQUFHLENBQUMsZUFBMEI7UUFFekQsSUFBSSxDQUFDRCxNQUFNO1lBQ1QsT0FBT1IscURBQVlBLENBQUNHLElBQUksQ0FBQztnQkFBRVEsT0FBTztZQUFtQixHQUFHO2dCQUFFQyxRQUFRO1lBQUk7UUFDeEU7UUFFQSxJQUFJO1lBQ0YsTUFBTUMsU0FBUyxNQUFNWiwrRUFBc0JBLENBQ3pDTyxNQUNBRSxVQUNBLEtBQU87WUFHVCxPQUFPVixxREFBWUEsQ0FBQ0csSUFBSSxDQUFDVTtRQUMzQixFQUFFLE9BQU9DLGlCQUFzQjtZQUM3QkMsUUFBUUosS0FBSyxDQUFDLHlCQUF5Qkc7WUFFdkMsa0RBQWtEO1lBQ2xELE1BQU1FLGlCQUFpQjtnQkFDckJDLE1BQU0sRUFBRTtnQkFDUkMsVUFBVVYsS0FBS1csSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUlDLE9BQU9DLFdBQVcsR0FBR0MsS0FBSyxDQUFDLEdBQUcsS0FBSztnQkFDNUVDLFVBQVU7b0JBQ1JDLE9BQU9kLGFBQWEsT0FBTyxzQkFBc0I7b0JBQ2pEZSxXQUFXO3dCQUNUZixhQUFhLE9BQU8sNkNBQTZDO3dCQUNqRUEsYUFBYSxPQUFPLHdDQUF3Qzt3QkFDNURBLGFBQWEsT0FBTyxrQ0FBa0M7d0JBQ3REQSxhQUFhLE9BQ1QsMENBQ0E7d0JBQ0pBLGFBQWEsT0FBTywwQ0FBMEM7cUJBQy9EO29CQUNEZ0IsZ0JBQWdCO3dCQUFDO3dCQUFTO3dCQUFjO3dCQUFZO3dCQUFXO3FCQUFVO29CQUN6RUMsU0FDRWpCLGFBQWEsT0FDVCw2R0FDQTtnQkFDUjtZQUNGO1lBRUEsT0FBT1YscURBQVlBLENBQUNHLElBQUksQ0FBQ2E7UUFDM0I7SUFDRixFQUFFLE9BQU9MLE9BQVk7UUFDbkJJLFFBQVFKLEtBQUssQ0FBQyxvQkFBb0JBO1FBQ2xDLE9BQU9YLHFEQUFZQSxDQUFDRyxJQUFJLENBQUM7WUFBRVEsT0FBT0EsTUFBTWlCLE9BQU8sSUFBSTtRQUE0QixHQUFHO1lBQUVoQixRQUFRO1FBQUk7SUFDbEc7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL2RlbmR5YWRpbmlyd2FuYS9Eb3dubG9hZHMvdW50aXRsZWQgZm9sZGVyL1BSUC1leGNlbGlmeWJhcnUvYXBwL2FwaS9vY3Ivcm91dGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmV4dFJlc3BvbnNlIH0gZnJvbSBcIm5leHQvc2VydmVyXCJcbmltcG9ydCB7IHByb2Nlc3NJbWFnZVdpdGhHZW1pbmkgfSBmcm9tIFwiQC9zZXJ2aWNlcy9nZW1pbmlTZXJ2aWNlXCJcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIE9QVElPTlMoKSB7XG4gIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICB7fSxcbiAgICB7XG4gICAgICBoZWFkZXJzOiB7XG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctT3JpZ2luXCI6IFwiKlwiLFxuICAgICAgICBcIkFjY2Vzcy1Db250cm9sLUFsbG93LU1ldGhvZHNcIjogXCJQT1NUXCIsXG4gICAgICAgIFwiQWNjZXNzLUNvbnRyb2wtQWxsb3ctSGVhZGVyc1wiOiBcIkNvbnRlbnQtVHlwZVwiLFxuICAgICAgfSxcbiAgICB9LFxuICApXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBmb3JtRGF0YSA9IGF3YWl0IHJlcXVlc3QuZm9ybURhdGEoKVxuICAgIGNvbnN0IGZpbGUgPSBmb3JtRGF0YS5nZXQoXCJmaWxlXCIpIGFzIEZpbGVcbiAgICBjb25zdCBsYW5ndWFnZSA9IChmb3JtRGF0YS5nZXQoXCJsYW5ndWFnZVwiKSBhcyBzdHJpbmcpIHx8IFwiZW5cIlxuXG4gICAgaWYgKCFmaWxlKSB7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogXCJObyBmaWxlIHByb3ZpZGVkXCIgfSwgeyBzdGF0dXM6IDQwMCB9KVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBwcm9jZXNzSW1hZ2VXaXRoR2VtaW5pKFxuICAgICAgICBmaWxlLFxuICAgICAgICBsYW5ndWFnZSxcbiAgICAgICAgKCkgPT4ge30sIC8vIFByb2dyZXNzIGNhbGxiYWNrIG9wdGlvbmFsIGluIEFQSSBjb250ZXh0XG4gICAgICApXG5cbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihyZXN1bHQpXG4gICAgfSBjYXRjaCAocHJvY2Vzc2luZ0Vycm9yOiBhbnkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJPQ1IgcHJvY2Vzc2luZyBlcnJvcjpcIiwgcHJvY2Vzc2luZ0Vycm9yKVxuXG4gICAgICAvLyBDcmVhdGUgYSBmYWxsYmFjayByZXN1bHQgd2l0aCBiYXNpYyBpbmZvcm1hdGlvblxuICAgICAgY29uc3QgZmFsbGJhY2tSZXN1bHQgPSB7XG4gICAgICAgIHJvd3M6IFtdLFxuICAgICAgICBmaWxlTmFtZTogZmlsZS5uYW1lIHx8IGBPQ1JfUmVzdWx0XyR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpLnNsaWNlKDAsIDEwKX1gLFxuICAgICAgICBhbmFseXNpczoge1xuICAgICAgICAgIHRpdGxlOiBsYW5ndWFnZSA9PT0gXCJlblwiID8gXCJEb2N1bWVudCBBbmFseXNpc1wiIDogXCJBbmFsaXNpcyBEb2t1bWVuXCIsXG4gICAgICAgICAga2V5UG9pbnRzOiBbXG4gICAgICAgICAgICBsYW5ndWFnZSA9PT0gXCJlblwiID8gXCJEb2N1bWVudCBwcm9jZXNzaW5nIGVuY291bnRlcmVkIGFuIGVycm9yXCIgOiBcIlBlbXJvc2VzYW4gZG9rdW1lbiBtZW5nYWxhbWkga2VzYWxhaGFuXCIsXG4gICAgICAgICAgICBsYW5ndWFnZSA9PT0gXCJlblwiID8gXCJCYXNpYyB0ZXh0IGV4dHJhY3Rpb24gd2FzIGF0dGVtcHRlZFwiIDogXCJFa3N0cmFrc2kgdGVrcyBkYXNhciB0ZWxhaCBkaWNvYmFcIixcbiAgICAgICAgICAgIGxhbmd1YWdlID09PSBcImVuXCIgPyBcIlNvbWUgY29udGVudCBtYXkgYmUgYXZhaWxhYmxlXCIgOiBcIkJlYmVyYXBhIGtvbnRlbiBtdW5na2luIHRlcnNlZGlhXCIsXG4gICAgICAgICAgICBsYW5ndWFnZSA9PT0gXCJlblwiXG4gICAgICAgICAgICAgID8gXCJQbGVhc2UgdHJ5IGFnYWluIHdpdGggYSBjbGVhcmVyIGltYWdlXCJcbiAgICAgICAgICAgICAgOiBcIlNpbGFrYW4gY29iYSBsYWdpIGRlbmdhbiBnYW1iYXIgeWFuZyBsZWJpaCBqZWxhc1wiLFxuICAgICAgICAgICAgbGFuZ3VhZ2UgPT09IFwiZW5cIiA/IFwiQ29udGFjdCBzdXBwb3J0IGlmIHRoZSBpc3N1ZSBwZXJzaXN0c1wiIDogXCJIdWJ1bmdpIGR1a3VuZ2FuIGppa2EgbWFzYWxhaCBiZXJsYW5qdXRcIixcbiAgICAgICAgICBdLFxuICAgICAgICAgIHJlY3VycmluZ1dvcmRzOiBbXCJlcnJvclwiLCBcInByb2Nlc3NpbmdcIiwgXCJkb2N1bWVudFwiLCBcImNvbnRlbnRcIiwgXCJzdXBwb3J0XCJdLFxuICAgICAgICAgIGNvbnRleHQ6XG4gICAgICAgICAgICBsYW5ndWFnZSA9PT0gXCJlblwiXG4gICAgICAgICAgICAgID8gXCJUaGUgZG9jdW1lbnQgY291bGQgbm90IGJlIGZ1bGx5IHByb2Nlc3NlZCBkdWUgdG8gYSB0ZWNobmljYWwgaXNzdWUuIFBsZWFzZSB0cnkgYWdhaW4gb3IgY29udGFjdCBzdXBwb3J0LlwiXG4gICAgICAgICAgICAgIDogXCJEb2t1bWVuIHRpZGFrIGRhcGF0IGRpcHJvc2VzIHNlcGVudWhueWEga2FyZW5hIG1hc2FsYWggdGVrbmlzLiBTaWxha2FuIGNvYmEgbGFnaSBhdGF1IGh1YnVuZ2kgZHVrdW5nYW4uXCIsXG4gICAgICAgIH0sXG4gICAgICB9XG5cbiAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihmYWxsYmFja1Jlc3VsdClcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiQVBJIHJvdXRlIGVycm9yOlwiLCBlcnJvcilcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oeyBlcnJvcjogZXJyb3IubWVzc2FnZSB8fCBcIkZhaWxlZCB0byBwcm9jZXNzIHJlcXVlc3RcIiB9LCB7IHN0YXR1czogNTAwIH0pXG4gIH1cbn1cblxuIl0sIm5hbWVzIjpbIk5leHRSZXNwb25zZSIsInByb2Nlc3NJbWFnZVdpdGhHZW1pbmkiLCJPUFRJT05TIiwianNvbiIsImhlYWRlcnMiLCJQT1NUIiwicmVxdWVzdCIsImZvcm1EYXRhIiwiZmlsZSIsImdldCIsImxhbmd1YWdlIiwiZXJyb3IiLCJzdGF0dXMiLCJyZXN1bHQiLCJwcm9jZXNzaW5nRXJyb3IiLCJjb25zb2xlIiwiZmFsbGJhY2tSZXN1bHQiLCJyb3dzIiwiZmlsZU5hbWUiLCJuYW1lIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwic2xpY2UiLCJhbmFseXNpcyIsInRpdGxlIiwia2V5UG9pbnRzIiwicmVjdXJyaW5nV29yZHMiLCJjb250ZXh0IiwibWVzc2FnZSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./app/api/ocr/route.ts\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   workAsyncStorage: () => (/* binding */ workAsyncStorage),\n/* harmony export */   workUnitAsyncStorage: () => (/* binding */ workUnitAsyncStorage)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/route-kind */ \"(rsc)/./node_modules/next/dist/server/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _Users_dendyadinirwana_Downloads_untitled_folder_PRP_excelifybaru_app_api_ocr_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/api/ocr/route.ts */ \"(rsc)/./app/api/ocr/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/ocr/route\",\n        pathname: \"/api/ocr\",\n        filename: \"route\",\n        bundlePath: \"app/api/ocr/route\"\n    },\n    resolvedPagePath: \"/Users/dendyadinirwana/Downloads/untitled folder/PRP-excelifybaru/app/api/ocr/route.ts\",\n    nextConfigOutput,\n    userland: _Users_dendyadinirwana_Downloads_untitled_folder_PRP_excelifybaru_app_api_ocr_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { workAsyncStorage, workUnitAsyncStorage, serverHooks } = routeModule;\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        workAsyncStorage,\n        workUnitAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIvaW5kZXguanM/bmFtZT1hcHAlMkZhcGklMkZvY3IlMkZyb3V0ZSZwYWdlPSUyRmFwaSUyRm9jciUyRnJvdXRlJmFwcFBhdGhzPSZwYWdlUGF0aD1wcml2YXRlLW5leHQtYXBwLWRpciUyRmFwaSUyRm9jciUyRnJvdXRlLnRzJmFwcERpcj0lMkZVc2VycyUyRmRlbmR5YWRpbmlyd2FuYSUyRkRvd25sb2FkcyUyRnVudGl0bGVkJTIwZm9sZGVyJTJGUFJQLWV4Y2VsaWZ5YmFydSUyRmFwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9JTJGVXNlcnMlMkZkZW5keWFkaW5pcndhbmElMkZEb3dubG9hZHMlMkZ1bnRpdGxlZCUyMGZvbGRlciUyRlBSUC1leGNlbGlmeWJhcnUmaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQStGO0FBQ3ZDO0FBQ3FCO0FBQ3NDO0FBQ25IO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix5R0FBbUI7QUFDM0M7QUFDQSxjQUFjLGtFQUFTO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxZQUFZO0FBQ1osQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLFFBQVEsc0RBQXNEO0FBQzlEO0FBQ0EsV0FBVyw0RUFBVztBQUN0QjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQzBGOztBQUUxRiIsInNvdXJjZXMiOlsiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFwcFJvdXRlUm91dGVNb2R1bGUgfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9yb3V0ZS1tb2R1bGVzL2FwcC1yb3V0ZS9tb2R1bGUuY29tcGlsZWRcIjtcbmltcG9ydCB7IFJvdXRlS2luZCB9IGZyb20gXCJuZXh0L2Rpc3Qvc2VydmVyL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCIvVXNlcnMvZGVuZHlhZGluaXJ3YW5hL0Rvd25sb2Fkcy91bnRpdGxlZCBmb2xkZXIvUFJQLWV4Y2VsaWZ5YmFydS9hcHAvYXBpL29jci9yb3V0ZS50c1wiO1xuLy8gV2UgaW5qZWN0IHRoZSBuZXh0Q29uZmlnT3V0cHV0IGhlcmUgc28gdGhhdCB3ZSBjYW4gdXNlIHRoZW0gaW4gdGhlIHJvdXRlXG4vLyBtb2R1bGUuXG5jb25zdCBuZXh0Q29uZmlnT3V0cHV0ID0gXCJcIlxuY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgQXBwUm91dGVSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuQVBQX1JPVVRFLFxuICAgICAgICBwYWdlOiBcIi9hcGkvb2NyL3JvdXRlXCIsXG4gICAgICAgIHBhdGhuYW1lOiBcIi9hcGkvb2NyXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9vY3Ivcm91dGVcIlxuICAgIH0sXG4gICAgcmVzb2x2ZWRQYWdlUGF0aDogXCIvVXNlcnMvZGVuZHlhZGluaXJ3YW5hL0Rvd25sb2Fkcy91bnRpdGxlZCBmb2xkZXIvUFJQLWV4Y2VsaWZ5YmFydS9hcHAvYXBpL29jci9yb3V0ZS50c1wiLFxuICAgIG5leHRDb25maWdPdXRwdXQsXG4gICAgdXNlcmxhbmRcbn0pO1xuLy8gUHVsbCBvdXQgdGhlIGV4cG9ydHMgdGhhdCB3ZSBuZWVkIHRvIGV4cG9zZSBmcm9tIHRoZSBtb2R1bGUuIFRoaXMgc2hvdWxkXG4vLyBiZSBlbGltaW5hdGVkIHdoZW4gd2UndmUgbW92ZWQgdGhlIG90aGVyIHJvdXRlcyB0byB0aGUgbmV3IGZvcm1hdC4gVGhlc2Vcbi8vIGFyZSB1c2VkIHRvIGhvb2sgaW50byB0aGUgcm91dGUuXG5jb25zdCB7IHdvcmtBc3luY1N0b3JhZ2UsIHdvcmtVbml0QXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcyB9ID0gcm91dGVNb2R1bGU7XG5mdW5jdGlvbiBwYXRjaEZldGNoKCkge1xuICAgIHJldHVybiBfcGF0Y2hGZXRjaCh7XG4gICAgICAgIHdvcmtBc3luY1N0b3JhZ2UsXG4gICAgICAgIHdvcmtVbml0QXN5bmNTdG9yYWdlXG4gICAgfSk7XG59XG5leHBvcnQgeyByb3V0ZU1vZHVsZSwgd29ya0FzeW5jU3RvcmFnZSwgd29ya1VuaXRBc3luY1N0b3JhZ2UsIHNlcnZlckhvb2tzLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./services/excelService.ts":
/*!**********************************!*\
  !*** ./services/excelService.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   downloadExcel: () => (/* binding */ downloadExcel),\n/* harmony export */   generateExcelFromText: () => (/* binding */ generateExcelFromText)\n/* harmony export */ });\n// Use dynamic import for XLSX\nasync function generateExcelFromText(results, options) {\n    try {\n        // Dynamically import XLSX to ensure it's available\n        const XLSX = await __webpack_require__.e(/*! import() */ \"vendor-chunks/xlsx\").then(__webpack_require__.bind(__webpack_require__, /*! xlsx */ \"(rsc)/./node_modules/xlsx/xlsx.mjs\"));\n        const workbook = XLSX.utils.book_new();\n        // Create a combined sheet if requested\n        if (options.combineIntoSingleSheet) {\n            const combinedData = [];\n            results.forEach((result)=>{\n                if (result.tableData) {\n                    combinedData.push(...result.tableData);\n                } else {\n                    combinedData.push(...result.text.split(\"\\n\").map((line)=>[\n                            line\n                        ]));\n                }\n            });\n            const combinedSheet = XLSX.utils.aoa_to_sheet(combinedData);\n            XLSX.utils.book_append_sheet(workbook, combinedSheet, options.sheetName || \"Combined Results\");\n        } else {\n            // Create individual sheets for each result\n            results.forEach((result, index)=>{\n                const sheetName = result.fileName || `Sheet${index + 1}`;\n                const sheetData = result.tableData || result.text.split(\"\\n\").map((line)=>[\n                        line\n                    ]);\n                const sheet = XLSX.utils.aoa_to_sheet(sheetData);\n                XLSX.utils.book_append_sheet(workbook, sheet, sheetName);\n            });\n        }\n        // Generate the Excel file\n        const excelBuffer = XLSX.write(workbook, {\n            bookType: \"xlsx\",\n            type: \"buffer\"\n        });\n        if (options.returnBuffer) {\n            return {\n                fileName: options.fileName,\n                buffer: excelBuffer\n            };\n        }\n        // Create a blob URL for download\n        const blob = new Blob([\n            excelBuffer\n        ], {\n            type: \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        });\n        const url = URL.createObjectURL(blob);\n        return {\n            url,\n            fileName: options.fileName\n        };\n    } catch (error) {\n        console.error(\"Error generating Excel:\", error);\n        // Create a mock Excel file as fallback\n        const mockBuffer = Buffer.from([\n            0x50,\n            0x4b,\n            0x03,\n            0x04,\n            0x14,\n            0x00,\n            0x00,\n            0x00,\n            0x08,\n            0x00,\n            0x00,\n            0x00,\n            0x21,\n            0x00\n        ]);\n        return {\n            fileName: options.fileName,\n            buffer: mockBuffer\n        };\n    }\n}\nconst downloadExcel = (url, fileName = \"converted-document.xlsx\")=>{\n    const link = document.createElement(\"a\");\n    link.href = url;\n    link.download = fileName;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9zZXJ2aWNlcy9leGNlbFNlcnZpY2UudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw4QkFBOEI7QUFjdkIsZUFBZUEsc0JBQ3BCQyxPQUEyRSxFQUMzRUMsT0FBcUI7SUFFckIsSUFBSTtRQUNGLG1EQUFtRDtRQUNuRCxNQUFNQyxPQUFPLE1BQU0saUtBQWM7UUFFakMsTUFBTUMsV0FBV0QsS0FBS0UsS0FBSyxDQUFDQyxRQUFRO1FBRXBDLHVDQUF1QztRQUN2QyxJQUFJSixRQUFRSyxzQkFBc0IsRUFBRTtZQUNsQyxNQUFNQyxlQUEyQixFQUFFO1lBQ25DUCxRQUFRUSxPQUFPLENBQUMsQ0FBQ0M7Z0JBQ2YsSUFBSUEsT0FBT0MsU0FBUyxFQUFFO29CQUNwQkgsYUFBYUksSUFBSSxJQUFJRixPQUFPQyxTQUFTO2dCQUN2QyxPQUFPO29CQUNMSCxhQUFhSSxJQUFJLElBQUlGLE9BQU9HLElBQUksQ0FBQ0MsS0FBSyxDQUFDLE1BQU1DLEdBQUcsQ0FBQyxDQUFDQyxPQUFTOzRCQUFDQTt5QkFBSztnQkFDbkU7WUFDRjtZQUVBLE1BQU1DLGdCQUFnQmQsS0FBS0UsS0FBSyxDQUFDYSxZQUFZLENBQUNWO1lBQzlDTCxLQUFLRSxLQUFLLENBQUNjLGlCQUFpQixDQUFDZixVQUFVYSxlQUFlZixRQUFRa0IsU0FBUyxJQUFJO1FBQzdFLE9BQU87WUFDTCwyQ0FBMkM7WUFDM0NuQixRQUFRUSxPQUFPLENBQUMsQ0FBQ0MsUUFBUVc7Z0JBQ3ZCLE1BQU1ELFlBQVlWLE9BQU9ZLFFBQVEsSUFBSSxDQUFDLEtBQUssRUFBRUQsUUFBUSxHQUFHO2dCQUN4RCxNQUFNRSxZQUFZYixPQUFPQyxTQUFTLElBQUlELE9BQU9HLElBQUksQ0FBQ0MsS0FBSyxDQUFDLE1BQU1DLEdBQUcsQ0FBQyxDQUFDQyxPQUFTO3dCQUFDQTtxQkFBSztnQkFDbEYsTUFBTVEsUUFBUXJCLEtBQUtFLEtBQUssQ0FBQ2EsWUFBWSxDQUFDSztnQkFDdENwQixLQUFLRSxLQUFLLENBQUNjLGlCQUFpQixDQUFDZixVQUFVb0IsT0FBT0o7WUFDaEQ7UUFDRjtRQUVBLDBCQUEwQjtRQUMxQixNQUFNSyxjQUFjdEIsS0FBS3VCLEtBQUssQ0FBQ3RCLFVBQVU7WUFBRXVCLFVBQVU7WUFBUUMsTUFBTTtRQUFTO1FBRTVFLElBQUkxQixRQUFRMkIsWUFBWSxFQUFFO1lBQ3hCLE9BQU87Z0JBQ0xQLFVBQVVwQixRQUFRb0IsUUFBUTtnQkFDMUJRLFFBQVFMO1lBQ1Y7UUFDRjtRQUVBLGlDQUFpQztRQUNqQyxNQUFNTSxPQUFPLElBQUlDLEtBQUs7WUFBQ1A7U0FBWSxFQUFFO1lBQUVHLE1BQU07UUFBb0U7UUFDakgsTUFBTUssTUFBTUMsSUFBSUMsZUFBZSxDQUFDSjtRQUVoQyxPQUFPO1lBQ0xFO1lBQ0FYLFVBQVVwQixRQUFRb0IsUUFBUTtRQUM1QjtJQUNGLEVBQUUsT0FBT2MsT0FBTztRQUNkQyxRQUFRRCxLQUFLLENBQUMsMkJBQTJCQTtRQUV6Qyx1Q0FBdUM7UUFDdkMsTUFBTUUsYUFBYUMsT0FBT0MsSUFBSSxDQUFDO1lBQUM7WUFBTTtZQUFNO1lBQU07WUFBTTtZQUFNO1lBQU07WUFBTTtZQUFNO1lBQU07WUFBTTtZQUFNO1lBQU07WUFBTTtTQUFLO1FBRW5ILE9BQU87WUFDTGxCLFVBQVVwQixRQUFRb0IsUUFBUTtZQUMxQlEsUUFBUVE7UUFDVjtJQUNGO0FBQ0Y7QUFFTyxNQUFNRyxnQkFBZ0IsQ0FBQ1IsS0FBYVgsV0FBVyx5QkFBeUI7SUFDN0UsTUFBTW9CLE9BQU9DLFNBQVNDLGFBQWEsQ0FBQztJQUNwQ0YsS0FBS0csSUFBSSxHQUFHWjtJQUNaUyxLQUFLSSxRQUFRLEdBQUd4QjtJQUNoQnFCLFNBQVNJLElBQUksQ0FBQ0MsV0FBVyxDQUFDTjtJQUMxQkEsS0FBS08sS0FBSztJQUNWTixTQUFTSSxJQUFJLENBQUNHLFdBQVcsQ0FBQ1I7QUFDNUIsRUFBQyIsInNvdXJjZXMiOlsiL1VzZXJzL2RlbmR5YWRpbmlyd2FuYS9Eb3dubG9hZHMvdW50aXRsZWQgZm9sZGVyL1BSUC1leGNlbGlmeWJhcnUvc2VydmljZXMvZXhjZWxTZXJ2aWNlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFVzZSBkeW5hbWljIGltcG9ydCBmb3IgWExTWFxuaW50ZXJmYWNlIEV4Y2VsT3B0aW9ucyB7XG4gIGZpbGVOYW1lOiBzdHJpbmdcbiAgc2hlZXROYW1lPzogc3RyaW5nXG4gIGNvbWJpbmVJbnRvU2luZ2xlU2hlZXQ/OiBib29sZWFuXG4gIHJldHVybkJ1ZmZlcj86IGJvb2xlYW5cbn1cblxuaW50ZXJmYWNlIEV4Y2VsUmVzdWx0IHtcbiAgdXJsPzogc3RyaW5nXG4gIGZpbGVOYW1lOiBzdHJpbmdcbiAgYnVmZmVyPzogQnVmZmVyXG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZW5lcmF0ZUV4Y2VsRnJvbVRleHQoXG4gIHJlc3VsdHM6IEFycmF5PHsgdGV4dDogc3RyaW5nOyB0YWJsZURhdGE/OiBzdHJpbmdbXVtdOyBmaWxlTmFtZT86IHN0cmluZyB9PixcbiAgb3B0aW9uczogRXhjZWxPcHRpb25zLFxuKTogUHJvbWlzZTxFeGNlbFJlc3VsdD4ge1xuICB0cnkge1xuICAgIC8vIER5bmFtaWNhbGx5IGltcG9ydCBYTFNYIHRvIGVuc3VyZSBpdCdzIGF2YWlsYWJsZVxuICAgIGNvbnN0IFhMU1ggPSBhd2FpdCBpbXBvcnQoXCJ4bHN4XCIpXG5cbiAgICBjb25zdCB3b3JrYm9vayA9IFhMU1gudXRpbHMuYm9va19uZXcoKVxuXG4gICAgLy8gQ3JlYXRlIGEgY29tYmluZWQgc2hlZXQgaWYgcmVxdWVzdGVkXG4gICAgaWYgKG9wdGlvbnMuY29tYmluZUludG9TaW5nbGVTaGVldCkge1xuICAgICAgY29uc3QgY29tYmluZWREYXRhOiBzdHJpbmdbXVtdID0gW11cbiAgICAgIHJlc3VsdHMuZm9yRWFjaCgocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQudGFibGVEYXRhKSB7XG4gICAgICAgICAgY29tYmluZWREYXRhLnB1c2goLi4ucmVzdWx0LnRhYmxlRGF0YSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb21iaW5lZERhdGEucHVzaCguLi5yZXN1bHQudGV4dC5zcGxpdChcIlxcblwiKS5tYXAoKGxpbmUpID0+IFtsaW5lXSkpXG4gICAgICAgIH1cbiAgICAgIH0pXG5cbiAgICAgIGNvbnN0IGNvbWJpbmVkU2hlZXQgPSBYTFNYLnV0aWxzLmFvYV90b19zaGVldChjb21iaW5lZERhdGEpXG4gICAgICBYTFNYLnV0aWxzLmJvb2tfYXBwZW5kX3NoZWV0KHdvcmtib29rLCBjb21iaW5lZFNoZWV0LCBvcHRpb25zLnNoZWV0TmFtZSB8fCBcIkNvbWJpbmVkIFJlc3VsdHNcIilcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQ3JlYXRlIGluZGl2aWR1YWwgc2hlZXRzIGZvciBlYWNoIHJlc3VsdFxuICAgICAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgICAgIGNvbnN0IHNoZWV0TmFtZSA9IHJlc3VsdC5maWxlTmFtZSB8fCBgU2hlZXQke2luZGV4ICsgMX1gXG4gICAgICAgIGNvbnN0IHNoZWV0RGF0YSA9IHJlc3VsdC50YWJsZURhdGEgfHwgcmVzdWx0LnRleHQuc3BsaXQoXCJcXG5cIikubWFwKChsaW5lKSA9PiBbbGluZV0pXG4gICAgICAgIGNvbnN0IHNoZWV0ID0gWExTWC51dGlscy5hb2FfdG9fc2hlZXQoc2hlZXREYXRhKVxuICAgICAgICBYTFNYLnV0aWxzLmJvb2tfYXBwZW5kX3NoZWV0KHdvcmtib29rLCBzaGVldCwgc2hlZXROYW1lKVxuICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBHZW5lcmF0ZSB0aGUgRXhjZWwgZmlsZVxuICAgIGNvbnN0IGV4Y2VsQnVmZmVyID0gWExTWC53cml0ZSh3b3JrYm9vaywgeyBib29rVHlwZTogXCJ4bHN4XCIsIHR5cGU6IFwiYnVmZmVyXCIgfSlcblxuICAgIGlmIChvcHRpb25zLnJldHVybkJ1ZmZlcikge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZmlsZU5hbWU6IG9wdGlvbnMuZmlsZU5hbWUsXG4gICAgICAgIGJ1ZmZlcjogZXhjZWxCdWZmZXIsXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ3JlYXRlIGEgYmxvYiBVUkwgZm9yIGRvd25sb2FkXG4gICAgY29uc3QgYmxvYiA9IG5ldyBCbG9iKFtleGNlbEJ1ZmZlcl0sIHsgdHlwZTogXCJhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldFwiIH0pXG4gICAgY29uc3QgdXJsID0gVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIHVybCxcbiAgICAgIGZpbGVOYW1lOiBvcHRpb25zLmZpbGVOYW1lLFxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZ2VuZXJhdGluZyBFeGNlbDpcIiwgZXJyb3IpXG5cbiAgICAvLyBDcmVhdGUgYSBtb2NrIEV4Y2VsIGZpbGUgYXMgZmFsbGJhY2tcbiAgICBjb25zdCBtb2NrQnVmZmVyID0gQnVmZmVyLmZyb20oWzB4NTAsIDB4NGIsIDB4MDMsIDB4MDQsIDB4MTQsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MDgsIDB4MDAsIDB4MDAsIDB4MDAsIDB4MjEsIDB4MDBdKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGZpbGVOYW1lOiBvcHRpb25zLmZpbGVOYW1lLFxuICAgICAgYnVmZmVyOiBtb2NrQnVmZmVyLFxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3QgZG93bmxvYWRFeGNlbCA9ICh1cmw6IHN0cmluZywgZmlsZU5hbWUgPSBcImNvbnZlcnRlZC1kb2N1bWVudC54bHN4XCIpID0+IHtcbiAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpXG4gIGxpbmsuaHJlZiA9IHVybFxuICBsaW5rLmRvd25sb2FkID0gZmlsZU5hbWVcbiAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsaW5rKVxuICBsaW5rLmNsaWNrKClcbiAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChsaW5rKVxufVxuXG4iXSwibmFtZXMiOlsiZ2VuZXJhdGVFeGNlbEZyb21UZXh0IiwicmVzdWx0cyIsIm9wdGlvbnMiLCJYTFNYIiwid29ya2Jvb2siLCJ1dGlscyIsImJvb2tfbmV3IiwiY29tYmluZUludG9TaW5nbGVTaGVldCIsImNvbWJpbmVkRGF0YSIsImZvckVhY2giLCJyZXN1bHQiLCJ0YWJsZURhdGEiLCJwdXNoIiwidGV4dCIsInNwbGl0IiwibWFwIiwibGluZSIsImNvbWJpbmVkU2hlZXQiLCJhb2FfdG9fc2hlZXQiLCJib29rX2FwcGVuZF9zaGVldCIsInNoZWV0TmFtZSIsImluZGV4IiwiZmlsZU5hbWUiLCJzaGVldERhdGEiLCJzaGVldCIsImV4Y2VsQnVmZmVyIiwid3JpdGUiLCJib29rVHlwZSIsInR5cGUiLCJyZXR1cm5CdWZmZXIiLCJidWZmZXIiLCJibG9iIiwiQmxvYiIsInVybCIsIlVSTCIsImNyZWF0ZU9iamVjdFVSTCIsImVycm9yIiwiY29uc29sZSIsIm1vY2tCdWZmZXIiLCJCdWZmZXIiLCJmcm9tIiwiZG93bmxvYWRFeGNlbCIsImxpbmsiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJocmVmIiwiZG93bmxvYWQiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJjbGljayIsInJlbW92ZUNoaWxkIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./services/excelService.ts\n");

/***/ }),

/***/ "(rsc)/./services/geminiService.ts":
/*!***********************************!*\
  !*** ./services/geminiService.ts ***!
  \***********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   processImageWithGemini: () => (/* binding */ processImageWithGemini)\n/* harmony export */ });\n/* harmony import */ var _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @google/generative-ai */ \"(rsc)/./node_modules/@google/generative-ai/dist/index.mjs\");\n/* harmony import */ var _excelService__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./excelService */ \"(rsc)/./services/excelService.ts\");\n\n\n// Initialize Gemini API with environment variable\nconst GOOGLE_AI_KEY = process.env.GOOGLE_AI_KEY;\nif (!GOOGLE_AI_KEY) {\n    throw new Error(\"GOOGLE_AI_KEY environment variable is not set. Please add it to your .env file.\");\n}\nconst genAI = new _google_generative_ai__WEBPACK_IMPORTED_MODULE_0__.GoogleGenerativeAI(GOOGLE_AI_KEY);\n// Retry mechanism for API calls with exponential backoff\nasync function retryApiCall(fn, maxRetries = 3, initialDelay = 2000) {\n    let lastError;\n    for(let attempt = 0; attempt < maxRetries; attempt++){\n        try {\n            // Add a small delay before each request to prevent rate limiting\n            if (attempt > 0) {\n                const delay = initialDelay * Math.pow(2, attempt - 1);\n                await new Promise((resolve)=>setTimeout(resolve, delay));\n            }\n            return await fn();\n        } catch (error) {\n            lastError = error;\n            // If it's not a rate limit error, don't retry\n            if (!error.message?.includes(\"429\") && !error.message?.includes(\"Too Many Requests\")) {\n                throw error;\n            }\n            // If we've hit max retries, throw the error\n            if (attempt === maxRetries - 1) {\n                throw new Error(`Rate limit exceeded after ${maxRetries} attempts. Please try again later.`);\n            }\n        }\n    }\n    throw lastError;\n}\n// Add a delay between API calls\nasync function delay(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n// Create a default analysis based on the document content\nfunction createDefaultAnalysis(text, language) {\n    // Extract some basic information from the text\n    const wordCount = text.split(/\\s+/).length;\n    const paragraphCount = text.split(/\\n\\s*\\n/).length;\n    const lines = text.split(\"\\n\").length;\n    // Create a simple title based on the first line or first few words\n    let title = text.split(\"\\n\")[0] || \"Document Analysis\";\n    if (title.length > 50) {\n        title = title.substring(0, 47) + \"...\";\n    }\n    return {\n        title: title,\n        keyPoints: [\n            language === \"en\" ? `Document contains approximately ${wordCount} words` : `Dokumen berisi sekitar ${wordCount} kata`,\n            language === \"en\" ? `Content is structured in ${paragraphCount} paragraphs` : `Konten disusun dalam ${paragraphCount} paragraf`,\n            language === \"en\" ? `Text has been successfully extracted and processed` : `Teks telah berhasil diekstrak dan diproses`,\n            language === \"en\" ? `Document has been converted to Excel format` : `Dokumen telah dikonversi ke format Excel`,\n            language === \"en\" ? `Analysis completed with basic content extraction` : `Analisis selesai dengan ekstraksi konten dasar`\n        ],\n        recurringWords: [\n            \"document\",\n            \"content\",\n            \"data\",\n            \"information\",\n            \"text\"\n        ],\n        context: language === \"en\" ? `This document contains ${lines} lines of text that have been processed and converted to Excel format. The content has been structured to maintain the original formatting as closely as possible.` : `Dokumen ini berisi ${lines} baris teks yang telah diproses dan dikonversi ke format Excel. Konten telah disusun untuk mempertahankan format asli sedekat mungkin.`\n    };\n}\n// Function to analyze word frequency and patterns\nasync function analyzeWordFrequency(text) {\n    // Remove common stop words and punctuation\n    const stopWords = new Set([\n        'the',\n        'a',\n        'an',\n        'and',\n        'or',\n        'but',\n        'in',\n        'on',\n        'at',\n        'to',\n        'for',\n        'of',\n        'with',\n        'by'\n    ]);\n    const words = text.toLowerCase().replace(/[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]/g, '').split(/\\s+/).filter((word)=>word.length > 2 && !stopWords.has(word));\n    // Count word frequencies\n    const wordFreq = new Map();\n    words.forEach((word)=>{\n        wordFreq.set(word, (wordFreq.get(word) || 0) + 1);\n    });\n    // Calculate significance based on frequency and position\n    const wordAnalysis = Array.from(wordFreq.entries()).map(([word, freq])=>{\n        // Calculate significance based on:\n        // 1. Frequency of occurrence\n        // 2. Position in document (words appearing in first paragraph get higher weight)\n        // 3. Word length (longer words often more significant)\n        const firstParagraph = text.split('\\n\\n')[0].toLowerCase();\n        const positionBonus = firstParagraph.includes(word) ? 1.5 : 1;\n        const lengthBonus = Math.min(word.length / 5, 1.5);\n        const significance = freq * positionBonus * lengthBonus;\n        return {\n            word,\n            frequency: freq,\n            significance\n        };\n    });\n    // Sort by significance and return top results\n    return wordAnalysis.sort((a, b)=>b.significance - a.significance);\n}\n// Enhanced function to analyze text and extract key information\nasync function analyzeTextContext(text, language) {\n    try {\n        if (text.length < 100) {\n            return createDefaultAnalysis(text, language);\n        }\n        // Analyze word frequency\n        const wordAnalysis = await analyzeWordFrequency(text);\n        const topWords = wordAnalysis.slice(0, 10).map((w)=>w.word);\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash\"\n        });\n        const enhancedPrompt = `\n      Analyze the following text and provide a comprehensive analysis:\n      \n      Text to analyze:\n      ${text.substring(0, 4000)} ${text.length > 4000 ? \"... (text truncated for brevity)\" : \"\"}\n      \n      Most significant words identified: ${topWords.join(', ')}\n      Language: ${language}\n      \n      Please provide:\n      1. A concise but descriptive title (max 10 words)\n      2. 5 key points that capture the main insights and implications\n      3. Top 5 most significant recurring concepts or themes (not just individual words)\n      4. A contextual summary that:\n         - Identifies the document type and purpose\n         - Highlights key relationships between concepts\n         - Notes any significant patterns or trends\n         - Provides relevant industry or domain context\n      \n      Format your response as plain text with clear section headers.\n    `;\n        const result = await retryApiCall(()=>model.generateContent(enhancedPrompt));\n        const response = await result.response;\n        const analysisText = response.text();\n        // Parse the enhanced analysis\n        const analysis = parseTextAnalysis(analysisText, language);\n        if (analysis) {\n            // Enrich with web search\n            const enrichedContext = await enrichContextWithWebSearch(text, topWords, language);\n            return {\n                ...analysis,\n                context: `${analysis.context}\\n\\nAdditional Context:\\n${enrichedContext}`\n            };\n        }\n        return createDefaultAnalysis(text, language);\n    } catch (error) {\n        console.error(\"Error in text analysis:\", error);\n        return createDefaultAnalysis(text, language);\n    }\n}\n// Parse a plain text analysis response\nfunction parseTextAnalysis(text, language) {\n    try {\n        // Extract title - usually the first line\n        const titleMatch = text.match(/(?:title|judul):\\s*(.+?)(?:\\n|$)/i);\n        const title = titleMatch ? titleMatch[1].trim() : \"Document Analysis\";\n        // Extract key points - look for numbered lists or bullet points\n        const keyPointsSection = text.match(/(?:key points|main points|points|poin utama|poin kunci):([\\s\\S]*?)(?:\\n\\n|\\n[A-Za-z]|$)/i);\n        let keyPoints = [];\n        if (keyPointsSection && keyPointsSection[1]) {\n            // Look for numbered or bulleted list items\n            const pointMatches = keyPointsSection[1].match(/(?:\\d+\\.|\\*|-)\\s*(.+?)(?:\\n|$)/g);\n            if (pointMatches && pointMatches.length > 0) {\n                keyPoints = pointMatches.map((point)=>point.replace(/^\\d+\\.|\\*|-\\s*/, \"\").trim()).filter((point)=>point.length > 0).slice(0, 5);\n            }\n        }\n        // If we couldn't find key points, split by newlines\n        if (keyPoints.length === 0) {\n            const lines = keyPointsSection ? keyPointsSection[1].split(\"\\n\").map((line)=>line.trim()).filter((line)=>line.length > 0) : [];\n            keyPoints = lines.slice(0, 5);\n        }\n        // Ensure we have 5 key points\n        while(keyPoints.length < 5){\n            keyPoints.push(language === \"en\" ? \"Content successfully processed\" : \"Konten berhasil diproses\");\n        }\n        // Extract recurring words\n        const recurringWordsSection = text.match(/(?:recurring words|recurring|words|kata berulang):([\\s\\S]*?)(?:\\n\\n|\\n[A-Za-z]|$)/i);\n        let recurringWords = [];\n        if (recurringWordsSection && recurringWordsSection[1]) {\n            // Look for list items\n            const wordMatches = recurringWordsSection[1].match(/(?:\\d+\\.|\\*|-)\\s*(.+?)(?:\\n|$)/g);\n            if (wordMatches && wordMatches.length > 0) {\n                recurringWords = wordMatches.map((word)=>word.replace(/^\\d+\\.|\\*|-\\s*/, \"\").trim()).filter((word)=>word.length > 0).slice(0, 5);\n            } else {\n                // If no list format, try comma-separated\n                recurringWords = recurringWordsSection[1].split(/,|\\n/).map((word)=>word.trim()).filter((word)=>word.length > 0).slice(0, 5);\n            }\n        }\n        // Ensure we have 5 recurring words\n        while(recurringWords.length < 5){\n            recurringWords.push([\n                \"document\",\n                \"content\",\n                \"data\",\n                \"information\",\n                \"text\"\n            ][recurringWords.length]);\n        }\n        // Extract context\n        const contextSection = text.match(/(?:context|brief context|konteks):([\\s\\S]*?)(?:\\n\\n|\\n[A-Za-z]|$)/i);\n        const context = contextSection && contextSection[1] ? contextSection[1].trim() : language === \"en\" ? \"The document was successfully processed and converted to Excel format.\" : \"Dokumen berhasil diproses dan dikonversi ke format Excel.\";\n        return {\n            title,\n            keyPoints,\n            recurringWords,\n            context\n        };\n    } catch (error) {\n        console.error(\"Error parsing text analysis:\", error);\n        return null;\n    }\n}\n// Enhanced web search function\nasync function enrichContextWithWebSearch(text, significantWords, language) {\n    try {\n        const model = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash\"\n        });\n        const searchPrompt = `\n      Based on the following text and significant words, provide enriched context and insights.\n      \n      Text excerpt: \n      ${text.substring(0, 2000)}${text.length > 2000 ? \"... (text truncated for brevity)\" : \"\"}\n      \n      Significant Words and Concepts: ${significantWords.join(\", \")}\n      Language: ${language}\n      \n      Please provide:\n      1. Industry or Domain Context:\n         - Relevant background information\n         - Current trends or developments\n         - Common practices or standards\n      \n      2. Related Insights:\n         - Connections to broader themes\n         - Potential implications\n         - Similar cases or examples\n      \n      3. Additional Considerations:\n         - Key challenges or opportunities\n         - Best practices or recommendations\n         - Future outlook\n      \n      Format the response as a well-structured analysis in ${language}, focusing on practical insights and actionable information.\n      Keep the total response under 300 words while maintaining depth and relevance.\n    `;\n        const result = await retryApiCall(()=>model.generateContent(searchPrompt));\n        const response = await result.response;\n        return response.text();\n    } catch (error) {\n        console.error(\"Error in context enrichment:\", error);\n        return language === \"en\" ? \"Additional context could not be generated at this time. Please refer to the extracted text for information.\" : \"Konteks tambahan tidak dapat dibuat saat ini. Silakan merujuk ke teks yang diekstrak untuk informasi.\";\n    }\n}\nconst processImageWithGemini = async (imageFile, language, progressCallback)=>{\n    if (!GOOGLE_AI_KEY) {\n        throw new Error(\"Google API key is not configured. Please set GOOGLE_AI_KEY in your .env file\");\n    }\n    try {\n        // Convert the file to a base64 data URL\n        const imageData = await fileToGenerativePart(imageFile);\n        // Set up model parameters based on the language\n        const geminiModel = genAI.getGenerativeModel({\n            model: \"gemini-2.0-flash\"\n        });\n        // Update progress to indicate model loading\n        if (progressCallback) progressCallback(20);\n        // Add initial delay before first API call\n        await delay(1000);\n        // Construct a prompt that specifies what we want Gemini to do\n        const languagePrompt = language === \"en\" ? \"Extract all text from this image, focusing on English content.\" : \"Extract all text from this image, focusing on Bahasa Indonesia content.\";\n        // Add table detection to the prompt\n        const fullPrompt = `${languagePrompt} If the image contains any structured data, tables, or spreadsheet-like content, please organize it as a table. Return your response in a format ready to be converted to an Excel spreadsheet with the correct structure. Maintain column and row alignments as shown in the image.`;\n        // Make the API request\n        if (progressCallback) progressCallback(40);\n        // Use retry mechanism for the main OCR process\n        const result = await retryApiCall(()=>geminiModel.generateContent([\n                fullPrompt,\n                imageData\n            ]));\n        if (progressCallback) progressCallback(70);\n        const response = await result.response;\n        const text = response.text();\n        // Process the result to check for table data\n        const tableData = extractTableData(text);\n        // Initialize analysis with placeholder data\n        let analysis = createDefaultAnalysis(text, language);\n        try {\n            // Add delay before analysis\n            await delay(2000);\n            // Perform context analysis\n            if (progressCallback) progressCallback(80);\n            analysis = await analyzeTextContext(text, language);\n            // Only attempt to enrich context if initial analysis succeeded\n            try {\n                // Add delay before enrichment\n                await delay(2000);\n                // Enrich context with web search\n                if (progressCallback) progressCallback(85);\n                const enrichedContext = await enrichContextWithWebSearch(text, analysis.recurringWords, language);\n                analysis.context = enrichedContext;\n            } catch (enrichError) {\n                console.error(\"Error enriching context:\", enrichError);\n            // Keep the original context if enrichment fails\n            }\n        } catch (analysisError) {\n            console.error(\"Error in document analysis:\", analysisError);\n        // Keep using the default analysis\n        }\n        if (progressCallback) progressCallback(90);\n        // Prepare the data for Excel generation\n        const ocrResult = {\n            text,\n            tableData: tableData.length > 0 ? tableData : undefined,\n            fileName: `OCR_Result_${new Date().toISOString().slice(0, 10)}`\n        };\n        // Generate Excel data without downloading\n        let excelData;\n        try {\n            const excelResult = await (0,_excelService__WEBPACK_IMPORTED_MODULE_1__.generateExcelFromText)([\n                ocrResult\n            ], {\n                fileName: ocrResult.fileName + \".xlsx\",\n                sheetName: \"OCR Results\",\n                combineIntoSingleSheet: false,\n                returnBuffer: true\n            });\n            excelData = excelResult.buffer || Buffer.from([]);\n        } catch (excelError) {\n            console.error(\"Error generating Excel:\", excelError);\n            // Create an empty buffer as fallback\n            excelData = Buffer.from([]);\n        }\n        if (progressCallback) progressCallback(100);\n        return {\n            rows: tableData.length > 0 ? tableData : text.split(\"\\n\").map((line)=>[\n                    line\n                ]).filter((row)=>row[0].trim().length > 0),\n            fileName: imageFile.name || `OCR_Result_${new Date().toISOString().slice(0, 10)}`,\n            analysis,\n            excelData\n        };\n    } catch (error) {\n        console.error(\"Error processing image with Gemini:\", error);\n        throw error;\n    }\n};\n// Helper function to convert File to GenerativePart\nasync function fileToGenerativePart(file) {\n    // Check if we're in a browser environment\n    if (false) {} else {\n        // Server-side handling\n        const buffer = await file.arrayBuffer();\n        const base64Content = Buffer.from(buffer).toString(\"base64\");\n        return {\n            inlineData: {\n                data: base64Content,\n                mimeType: file.type\n            }\n        };\n    }\n}\n// Function to extract table data from text with improved pattern recognition\nfunction extractTableData(text) {\n    const lines = text.split(\"\\n\").filter((line)=>line.trim() !== \"\");\n    const tableData = [];\n    let rowsWithSimilarStructure = 0;\n    const possibleDelimiters = [\n        \",\",\n        \"\\t\",\n        \"|\",\n        \";\"\n    ];\n    const patterns = {\n        csv: /(?:^|,)(\"(?:[^\"]+|\"\")*\"|[^,]*)/g,\n        table: /\\|\\s*([^|]+)\\s*\\|/g,\n        whitespace: /\\s{2,}/g\n    };\n    // First pass: Try to detect table structure\n    const sampleSize = Math.min(5, lines.length);\n    const structureScores = {\n        csv: 0,\n        table: 0,\n        whitespace: 0\n    };\n    for (const line of lines){\n        let bestDelimiter = \"\";\n        let maxSplits = 0;\n        // Check for structured data using delimiters\n        for (const delimiter of possibleDelimiters){\n            const splits = line.split(delimiter).length - 1;\n            if (splits > maxSplits) {\n                maxSplits = splits;\n                bestDelimiter = delimiter;\n            }\n        }\n        if (maxSplits > 1) {\n            rowsWithSimilarStructure++;\n            const row = line.split(bestDelimiter).map((cell)=>cell.trim()).filter((cell)=>cell.length > 0);\n            if (row.length > 0) {\n                tableData.push(row);\n            }\n        } else if (line.match(patterns.whitespace)) {\n            // Try whitespace separation as fallback\n            const row = line.split(patterns.whitespace).filter((cell)=>cell.trim().length > 0);\n            if (row.length > 1) {\n                tableData.push(row);\n                rowsWithSimilarStructure++;\n            }\n        }\n    }\n    // Return empty array if not enough evidence of tabular data\n    return rowsWithSimilarStructure >= 2 ? tableData : [];\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LEdBQUc7WUFDakJUO1lBQ0EsTUFBTXBCLE1BQU1qQyxLQUNUN0QsS0FBSyxDQUFDMEgsZUFDTi9GLEdBQUcsQ0FBQyxDQUFDbUcsT0FBU0EsS0FBS3JFLElBQUksSUFDdkIxQyxNQUFNLENBQUMsQ0FBQytHLE9BQVNBLEtBQUs3SCxNQUFNLEdBQUc7WUFDbEMsSUFBSTZGLElBQUk3RixNQUFNLEdBQUcsR0FBRztnQkFDbEIyRSxVQUFVZCxJQUFJLENBQUNnQztZQUNqQjtRQUNGLE9BQU8sSUFBSWpDLEtBQUtMLEtBQUssQ0FBQzRELFNBQVNHLFVBQVUsR0FBRztZQUMxQyx3Q0FBd0M7WUFDeEMsTUFBTXpCLE1BQU1qQyxLQUFLN0QsS0FBSyxDQUFDb0gsU0FBU0csVUFBVSxFQUFFeEcsTUFBTSxDQUFDLENBQUMrRyxPQUFTQSxLQUFLckUsSUFBSSxHQUFHeEQsTUFBTSxHQUFHO1lBQ2xGLElBQUk2RixJQUFJN0YsTUFBTSxHQUFHLEdBQUc7Z0JBQ2xCMkUsVUFBVWQsSUFBSSxDQUFDZ0M7Z0JBQ2ZvQjtZQUNGO1FBQ0Y7SUFDRjtJQUVBLDREQUE0RDtJQUM1RCxPQUFPQSw0QkFBNEIsSUFBSXRDLFlBQVksRUFBRTtBQUN2RCIsInNvdXJjZXMiOlsiL1VzZXJzL2RlbmR5YWRpbmlyd2FuYS9Eb3dubG9hZHMvdW50aXRsZWQgZm9sZGVyL1BSUC1leGNlbGlmeWJhcnUvc2VydmljZXMvZ2VtaW5pU2VydmljZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHb29nbGVHZW5lcmF0aXZlQUksIHR5cGUgUGFydCB9IGZyb20gXCJAZ29vZ2xlL2dlbmVyYXRpdmUtYWlcIlxuaW1wb3J0IHsgZ2VuZXJhdGVFeGNlbEZyb21UZXh0IH0gZnJvbSBcIi4vZXhjZWxTZXJ2aWNlXCJcblxuLy8gSW5pdGlhbGl6ZSBHZW1pbmkgQVBJIHdpdGggZW52aXJvbm1lbnQgdmFyaWFibGVcbmNvbnN0IEdPT0dMRV9BSV9LRVkgPSBwcm9jZXNzLmVudi5HT09HTEVfQUlfS0VZXG5pZiAoIUdPT0dMRV9BSV9LRVkpIHtcbiAgdGhyb3cgbmV3IEVycm9yKFwiR09PR0xFX0FJX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0LiBQbGVhc2UgYWRkIGl0IHRvIHlvdXIgLmVudiBmaWxlLlwiKVxufVxuXG5jb25zdCBnZW5BSSA9IG5ldyBHb29nbGVHZW5lcmF0aXZlQUkoR09PR0xFX0FJX0tFWSlcblxuaW50ZXJmYWNlIE9DUlJlc3VsdCB7XG4gIHRleHQ6IHN0cmluZ1xuICB0YWJsZURhdGE/OiBzdHJpbmdbXVtdXG4gIGZpbGVOYW1lPzogc3RyaW5nXG59XG5cbmludGVyZmFjZSBQcm9jZXNzZWREYXRhIHtcbiAgcm93czogc3RyaW5nW11bXVxuICBmaWxlTmFtZTogc3RyaW5nXG4gIGFuYWx5c2lzPzoge1xuICAgIHRpdGxlOiBzdHJpbmdcbiAgICBrZXlQb2ludHM6IHN0cmluZ1tdXG4gICAgcmVjdXJyaW5nV29yZHM6IHN0cmluZ1tdXG4gICAgY29udGV4dDogc3RyaW5nXG4gIH1cbiAgZXhjZWxEYXRhOiBCdWZmZXJcbn1cblxuLy8gUmV0cnkgbWVjaGFuaXNtIGZvciBBUEkgY2FsbHMgd2l0aCBleHBvbmVudGlhbCBiYWNrb2ZmXG5hc3luYyBmdW5jdGlvbiByZXRyeUFwaUNhbGw8VD4oZm46ICgpID0+IFByb21pc2U8VD4sIG1heFJldHJpZXMgPSAzLCBpbml0aWFsRGVsYXkgPSAyMDAwKTogUHJvbWlzZTxUPiB7XG4gIGxldCBsYXN0RXJyb3I6IGFueVxuXG4gIGZvciAobGV0IGF0dGVtcHQgPSAwOyBhdHRlbXB0IDwgbWF4UmV0cmllczsgYXR0ZW1wdCsrKSB7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEFkZCBhIHNtYWxsIGRlbGF5IGJlZm9yZSBlYWNoIHJlcXVlc3QgdG8gcHJldmVudCByYXRlIGxpbWl0aW5nXG4gICAgICBpZiAoYXR0ZW1wdCA+IDApIHtcbiAgICAgICAgY29uc3QgZGVsYXkgPSBpbml0aWFsRGVsYXkgKiBNYXRoLnBvdygyLCBhdHRlbXB0IC0gMSlcbiAgICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXdhaXQgZm4oKVxuICAgIH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcbiAgICAgIGxhc3RFcnJvciA9IGVycm9yXG5cbiAgICAgIC8vIElmIGl0J3Mgbm90IGEgcmF0ZSBsaW1pdCBlcnJvciwgZG9uJ3QgcmV0cnlcbiAgICAgIGlmICghZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoXCI0MjlcIikgJiYgIWVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKFwiVG9vIE1hbnkgUmVxdWVzdHNcIikpIHtcbiAgICAgICAgdGhyb3cgZXJyb3JcbiAgICAgIH1cblxuICAgICAgLy8gSWYgd2UndmUgaGl0IG1heCByZXRyaWVzLCB0aHJvdyB0aGUgZXJyb3JcbiAgICAgIGlmIChhdHRlbXB0ID09PSBtYXhSZXRyaWVzIC0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJhdGUgbGltaXQgZXhjZWVkZWQgYWZ0ZXIgJHttYXhSZXRyaWVzfSBhdHRlbXB0cy4gUGxlYXNlIHRyeSBhZ2FpbiBsYXRlci5gKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHRocm93IGxhc3RFcnJvclxufVxuXG4vLyBBZGQgYSBkZWxheSBiZXR3ZWVuIEFQSSBjYWxsc1xuYXN5bmMgZnVuY3Rpb24gZGVsYXkobXM6IG51bWJlcikge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKVxufVxuXG4vLyBDcmVhdGUgYSBkZWZhdWx0IGFuYWx5c2lzIGJhc2VkIG9uIHRoZSBkb2N1bWVudCBjb250ZW50XG5mdW5jdGlvbiBjcmVhdGVEZWZhdWx0QW5hbHlzaXMoXG4gIHRleHQ6IHN0cmluZyxcbiAgbGFuZ3VhZ2U6IHN0cmluZyxcbik6IHtcbiAgdGl0bGU6IHN0cmluZ1xuICBrZXlQb2ludHM6IHN0cmluZ1tdXG4gIHJlY3VycmluZ1dvcmRzOiBzdHJpbmdbXVxuICBjb250ZXh0OiBzdHJpbmdcbn0ge1xuICAvLyBFeHRyYWN0IHNvbWUgYmFzaWMgaW5mb3JtYXRpb24gZnJvbSB0aGUgdGV4dFxuICBjb25zdCB3b3JkQ291bnQgPSB0ZXh0LnNwbGl0KC9cXHMrLykubGVuZ3RoXG4gIGNvbnN0IHBhcmFncmFwaENvdW50ID0gdGV4dC5zcGxpdCgvXFxuXFxzKlxcbi8pLmxlbmd0aFxuICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoXCJcXG5cIikubGVuZ3RoXG5cbiAgLy8gQ3JlYXRlIGEgc2ltcGxlIHRpdGxlIGJhc2VkIG9uIHRoZSBmaXJzdCBsaW5lIG9yIGZpcnN0IGZldyB3b3Jkc1xuICBsZXQgdGl0bGUgPSB0ZXh0LnNwbGl0KFwiXFxuXCIpWzBdIHx8IFwiRG9jdW1lbnQgQW5hbHlzaXNcIlxuICBpZiAodGl0bGUubGVuZ3RoID4gNTApIHtcbiAgICB0aXRsZSA9IHRpdGxlLnN1YnN0cmluZygwLCA0NykgKyBcIi4uLlwiXG4gIH1cblxuICByZXR1cm4ge1xuICAgIHRpdGxlOiB0aXRsZSxcbiAgICBrZXlQb2ludHM6IFtcbiAgICAgIGxhbmd1YWdlID09PSBcImVuXCJcbiAgICAgICAgPyBgRG9jdW1lbnQgY29udGFpbnMgYXBwcm94aW1hdGVseSAke3dvcmRDb3VudH0gd29yZHNgXG4gICAgICAgIDogYERva3VtZW4gYmVyaXNpIHNla2l0YXIgJHt3b3JkQ291bnR9IGthdGFgLFxuICAgICAgbGFuZ3VhZ2UgPT09IFwiZW5cIlxuICAgICAgICA/IGBDb250ZW50IGlzIHN0cnVjdHVyZWQgaW4gJHtwYXJhZ3JhcGhDb3VudH0gcGFyYWdyYXBoc2BcbiAgICAgICAgOiBgS29udGVuIGRpc3VzdW4gZGFsYW0gJHtwYXJhZ3JhcGhDb3VudH0gcGFyYWdyYWZgLFxuICAgICAgbGFuZ3VhZ2UgPT09IFwiZW5cIlxuICAgICAgICA/IGBUZXh0IGhhcyBiZWVuIHN1Y2Nlc3NmdWxseSBleHRyYWN0ZWQgYW5kIHByb2Nlc3NlZGBcbiAgICAgICAgOiBgVGVrcyB0ZWxhaCBiZXJoYXNpbCBkaWVrc3RyYWsgZGFuIGRpcHJvc2VzYCxcbiAgICAgIGxhbmd1YWdlID09PSBcImVuXCIgPyBgRG9jdW1lbnQgaGFzIGJlZW4gY29udmVydGVkIHRvIEV4Y2VsIGZvcm1hdGAgOiBgRG9rdW1lbiB0ZWxhaCBkaWtvbnZlcnNpIGtlIGZvcm1hdCBFeGNlbGAsXG4gICAgICBsYW5ndWFnZSA9PT0gXCJlblwiXG4gICAgICAgID8gYEFuYWx5c2lzIGNvbXBsZXRlZCB3aXRoIGJhc2ljIGNvbnRlbnQgZXh0cmFjdGlvbmBcbiAgICAgICAgOiBgQW5hbGlzaXMgc2VsZXNhaSBkZW5nYW4gZWtzdHJha3NpIGtvbnRlbiBkYXNhcmAsXG4gICAgXSxcbiAgICByZWN1cnJpbmdXb3JkczogW1wiZG9jdW1lbnRcIiwgXCJjb250ZW50XCIsIFwiZGF0YVwiLCBcImluZm9ybWF0aW9uXCIsIFwidGV4dFwiXSxcbiAgICBjb250ZXh0OlxuICAgICAgbGFuZ3VhZ2UgPT09IFwiZW5cIlxuICAgICAgICA/IGBUaGlzIGRvY3VtZW50IGNvbnRhaW5zICR7bGluZXN9IGxpbmVzIG9mIHRleHQgdGhhdCBoYXZlIGJlZW4gcHJvY2Vzc2VkIGFuZCBjb252ZXJ0ZWQgdG8gRXhjZWwgZm9ybWF0LiBUaGUgY29udGVudCBoYXMgYmVlbiBzdHJ1Y3R1cmVkIHRvIG1haW50YWluIHRoZSBvcmlnaW5hbCBmb3JtYXR0aW5nIGFzIGNsb3NlbHkgYXMgcG9zc2libGUuYFxuICAgICAgICA6IGBEb2t1bWVuIGluaSBiZXJpc2kgJHtsaW5lc30gYmFyaXMgdGVrcyB5YW5nIHRlbGFoIGRpcHJvc2VzIGRhbiBkaWtvbnZlcnNpIGtlIGZvcm1hdCBFeGNlbC4gS29udGVuIHRlbGFoIGRpc3VzdW4gdW50dWsgbWVtcGVydGFoYW5rYW4gZm9ybWF0IGFzbGkgc2VkZWthdCBtdW5na2luLmAsXG4gIH1cbn1cblxuLy8gRnVuY3Rpb24gdG8gYW5hbHl6ZSB3b3JkIGZyZXF1ZW5jeSBhbmQgcGF0dGVybnNcbmFzeW5jIGZ1bmN0aW9uIGFuYWx5emVXb3JkRnJlcXVlbmN5KHRleHQ6IHN0cmluZyk6IFByb21pc2U8eyB3b3JkOiBzdHJpbmc7IGZyZXF1ZW5jeTogbnVtYmVyOyBzaWduaWZpY2FuY2U6IG51bWJlciB9W10+IHtcbiAgLy8gUmVtb3ZlIGNvbW1vbiBzdG9wIHdvcmRzIGFuZCBwdW5jdHVhdGlvblxuICBjb25zdCBzdG9wV29yZHMgPSBuZXcgU2V0KFsndGhlJywgJ2EnLCAnYW4nLCAnYW5kJywgJ29yJywgJ2J1dCcsICdpbicsICdvbicsICdhdCcsICd0bycsICdmb3InLCAnb2YnLCAnd2l0aCcsICdieSddKTtcbiAgY29uc3Qgd29yZHMgPSB0ZXh0LnRvTG93ZXJDYXNlKClcbiAgICAucmVwbGFjZSgvWy4sXFwvIyEkJVxcXiZcXCo7Ont9PVxcLV9gfigpXS9nLCAnJylcbiAgICAuc3BsaXQoL1xccysvKVxuICAgIC5maWx0ZXIod29yZCA9PiB3b3JkLmxlbmd0aCA+IDIgJiYgIXN0b3BXb3Jkcy5oYXMod29yZCkpO1xuXG4gIC8vIENvdW50IHdvcmQgZnJlcXVlbmNpZXNcbiAgY29uc3Qgd29yZEZyZXEgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xuICB3b3Jkcy5mb3JFYWNoKHdvcmQgPT4ge1xuICAgIHdvcmRGcmVxLnNldCh3b3JkLCAod29yZEZyZXEuZ2V0KHdvcmQpIHx8IDApICsgMSk7XG4gIH0pO1xuXG4gIC8vIENhbGN1bGF0ZSBzaWduaWZpY2FuY2UgYmFzZWQgb24gZnJlcXVlbmN5IGFuZCBwb3NpdGlvblxuICBjb25zdCB3b3JkQW5hbHlzaXMgPSBBcnJheS5mcm9tKHdvcmRGcmVxLmVudHJpZXMoKSkubWFwKChbd29yZCwgZnJlcV0pID0+IHtcbiAgICAvLyBDYWxjdWxhdGUgc2lnbmlmaWNhbmNlIGJhc2VkIG9uOlxuICAgIC8vIDEuIEZyZXF1ZW5jeSBvZiBvY2N1cnJlbmNlXG4gICAgLy8gMi4gUG9zaXRpb24gaW4gZG9jdW1lbnQgKHdvcmRzIGFwcGVhcmluZyBpbiBmaXJzdCBwYXJhZ3JhcGggZ2V0IGhpZ2hlciB3ZWlnaHQpXG4gICAgLy8gMy4gV29yZCBsZW5ndGggKGxvbmdlciB3b3JkcyBvZnRlbiBtb3JlIHNpZ25pZmljYW50KVxuICAgIGNvbnN0IGZpcnN0UGFyYWdyYXBoID0gdGV4dC5zcGxpdCgnXFxuXFxuJylbMF0udG9Mb3dlckNhc2UoKTtcbiAgICBjb25zdCBwb3NpdGlvbkJvbnVzID0gZmlyc3RQYXJhZ3JhcGguaW5jbHVkZXMod29yZCkgPyAxLjUgOiAxO1xuICAgIGNvbnN0IGxlbmd0aEJvbnVzID0gTWF0aC5taW4od29yZC5sZW5ndGggLyA1LCAxLjUpO1xuICAgIGNvbnN0IHNpZ25pZmljYW5jZSA9IGZyZXEgKiBwb3NpdGlvbkJvbnVzICogbGVuZ3RoQm9udXM7XG5cbiAgICByZXR1cm4ge1xuICAgICAgd29yZCxcbiAgICAgIGZyZXF1ZW5jeTogZnJlcSxcbiAgICAgIHNpZ25pZmljYW5jZVxuICAgIH07XG4gIH0pO1xuXG4gIC8vIFNvcnQgYnkgc2lnbmlmaWNhbmNlIGFuZCByZXR1cm4gdG9wIHJlc3VsdHNcbiAgcmV0dXJuIHdvcmRBbmFseXNpcy5zb3J0KChhLCBiKSA9PiBiLnNpZ25pZmljYW5jZSAtIGEuc2lnbmlmaWNhbmNlKTtcbn1cblxuLy8gRW5oYW5jZWQgZnVuY3Rpb24gdG8gYW5hbHl6ZSB0ZXh0IGFuZCBleHRyYWN0IGtleSBpbmZvcm1hdGlvblxuYXN5bmMgZnVuY3Rpb24gYW5hbHl6ZVRleHRDb250ZXh0KFxuICB0ZXh0OiBzdHJpbmcsXG4gIGxhbmd1YWdlOiBzdHJpbmcsXG4pOiBQcm9taXNlPHtcbiAgdGl0bGU6IHN0cmluZ1xuICBrZXlQb2ludHM6IHN0cmluZ1tdXG4gIHJlY3VycmluZ1dvcmRzOiBzdHJpbmdbXVxuICBjb250ZXh0OiBzdHJpbmdcbn0+IHtcbiAgdHJ5IHtcbiAgICBpZiAodGV4dC5sZW5ndGggPCAxMDApIHtcbiAgICAgIHJldHVybiBjcmVhdGVEZWZhdWx0QW5hbHlzaXModGV4dCwgbGFuZ3VhZ2UpO1xuICAgIH1cblxuICAgIC8vIEFuYWx5emUgd29yZCBmcmVxdWVuY3lcbiAgICBjb25zdCB3b3JkQW5hbHlzaXMgPSBhd2FpdCBhbmFseXplV29yZEZyZXF1ZW5jeSh0ZXh0KTtcbiAgICBjb25zdCB0b3BXb3JkcyA9IHdvcmRBbmFseXNpcy5zbGljZSgwLCAxMCkubWFwKHcgPT4gdy53b3JkKTtcblxuICAgIGNvbnN0IG1vZGVsID0gZ2VuQUkuZ2V0R2VuZXJhdGl2ZU1vZGVsKHsgbW9kZWw6IFwiZ2VtaW5pLTIuMC1mbGFzaFwiIH0pO1xuXG4gICAgY29uc3QgZW5oYW5jZWRQcm9tcHQgPSBgXG4gICAgICBBbmFseXplIHRoZSBmb2xsb3dpbmcgdGV4dCBhbmQgcHJvdmlkZSBhIGNvbXByZWhlbnNpdmUgYW5hbHlzaXM6XG4gICAgICBcbiAgICAgIFRleHQgdG8gYW5hbHl6ZTpcbiAgICAgICR7dGV4dC5zdWJzdHJpbmcoMCwgNDAwMCl9ICR7dGV4dC5sZW5ndGggPiA0MDAwID8gXCIuLi4gKHRleHQgdHJ1bmNhdGVkIGZvciBicmV2aXR5KVwiIDogXCJcIn1cbiAgICAgIFxuICAgICAgTW9zdCBzaWduaWZpY2FudCB3b3JkcyBpZGVudGlmaWVkOiAke3RvcFdvcmRzLmpvaW4oJywgJyl9XG4gICAgICBMYW5ndWFnZTogJHtsYW5ndWFnZX1cbiAgICAgIFxuICAgICAgUGxlYXNlIHByb3ZpZGU6XG4gICAgICAxLiBBIGNvbmNpc2UgYnV0IGRlc2NyaXB0aXZlIHRpdGxlIChtYXggMTAgd29yZHMpXG4gICAgICAyLiA1IGtleSBwb2ludHMgdGhhdCBjYXB0dXJlIHRoZSBtYWluIGluc2lnaHRzIGFuZCBpbXBsaWNhdGlvbnNcbiAgICAgIDMuIFRvcCA1IG1vc3Qgc2lnbmlmaWNhbnQgcmVjdXJyaW5nIGNvbmNlcHRzIG9yIHRoZW1lcyAobm90IGp1c3QgaW5kaXZpZHVhbCB3b3JkcylcbiAgICAgIDQuIEEgY29udGV4dHVhbCBzdW1tYXJ5IHRoYXQ6XG4gICAgICAgICAtIElkZW50aWZpZXMgdGhlIGRvY3VtZW50IHR5cGUgYW5kIHB1cnBvc2VcbiAgICAgICAgIC0gSGlnaGxpZ2h0cyBrZXkgcmVsYXRpb25zaGlwcyBiZXR3ZWVuIGNvbmNlcHRzXG4gICAgICAgICAtIE5vdGVzIGFueSBzaWduaWZpY2FudCBwYXR0ZXJucyBvciB0cmVuZHNcbiAgICAgICAgIC0gUHJvdmlkZXMgcmVsZXZhbnQgaW5kdXN0cnkgb3IgZG9tYWluIGNvbnRleHRcbiAgICAgIFxuICAgICAgRm9ybWF0IHlvdXIgcmVzcG9uc2UgYXMgcGxhaW4gdGV4dCB3aXRoIGNsZWFyIHNlY3Rpb24gaGVhZGVycy5cbiAgICBgO1xuXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmV0cnlBcGlDYWxsKCgpID0+IG1vZGVsLmdlbmVyYXRlQ29udGVudChlbmhhbmNlZFByb21wdCkpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzdWx0LnJlc3BvbnNlO1xuICAgIGNvbnN0IGFuYWx5c2lzVGV4dCA9IHJlc3BvbnNlLnRleHQoKTtcblxuICAgIC8vIFBhcnNlIHRoZSBlbmhhbmNlZCBhbmFseXNpc1xuICAgIGNvbnN0IGFuYWx5c2lzID0gcGFyc2VUZXh0QW5hbHlzaXMoYW5hbHlzaXNUZXh0LCBsYW5ndWFnZSk7XG5cbiAgICBpZiAoYW5hbHlzaXMpIHtcbiAgICAgIC8vIEVucmljaCB3aXRoIHdlYiBzZWFyY2hcbiAgICAgIGNvbnN0IGVucmljaGVkQ29udGV4dCA9IGF3YWl0IGVucmljaENvbnRleHRXaXRoV2ViU2VhcmNoKHRleHQsIHRvcFdvcmRzLCBsYW5ndWFnZSk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5hbmFseXNpcyxcbiAgICAgICAgY29udGV4dDogYCR7YW5hbHlzaXMuY29udGV4dH1cXG5cXG5BZGRpdGlvbmFsIENvbnRleHQ6XFxuJHtlbnJpY2hlZENvbnRleHR9YFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3JlYXRlRGVmYXVsdEFuYWx5c2lzKHRleHQsIGxhbmd1YWdlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gdGV4dCBhbmFseXNpczpcIiwgZXJyb3IpO1xuICAgIHJldHVybiBjcmVhdGVEZWZhdWx0QW5hbHlzaXModGV4dCwgbGFuZ3VhZ2UpO1xuICB9XG59XG5cbi8vIFBhcnNlIGEgcGxhaW4gdGV4dCBhbmFseXNpcyByZXNwb25zZVxuZnVuY3Rpb24gcGFyc2VUZXh0QW5hbHlzaXMoXG4gIHRleHQ6IHN0cmluZyxcbiAgbGFuZ3VhZ2U6IHN0cmluZyxcbik6IHtcbiAgdGl0bGU6IHN0cmluZ1xuICBrZXlQb2ludHM6IHN0cmluZ1tdXG4gIHJlY3VycmluZ1dvcmRzOiBzdHJpbmdbXVxuICBjb250ZXh0OiBzdHJpbmdcbn0gfCBudWxsIHtcbiAgdHJ5IHtcbiAgICAvLyBFeHRyYWN0IHRpdGxlIC0gdXN1YWxseSB0aGUgZmlyc3QgbGluZVxuICAgIGNvbnN0IHRpdGxlTWF0Y2ggPSB0ZXh0Lm1hdGNoKC8oPzp0aXRsZXxqdWR1bCk6XFxzKiguKz8pKD86XFxufCQpL2kpXG4gICAgY29uc3QgdGl0bGUgPSB0aXRsZU1hdGNoID8gdGl0bGVNYXRjaFsxXS50cmltKCkgOiBcIkRvY3VtZW50IEFuYWx5c2lzXCJcblxuICAgIC8vIEV4dHJhY3Qga2V5IHBvaW50cyAtIGxvb2sgZm9yIG51bWJlcmVkIGxpc3RzIG9yIGJ1bGxldCBwb2ludHNcbiAgICBjb25zdCBrZXlQb2ludHNTZWN0aW9uID0gdGV4dC5tYXRjaChcbiAgICAgIC8oPzprZXkgcG9pbnRzfG1haW4gcG9pbnRzfHBvaW50c3xwb2luIHV0YW1hfHBvaW4ga3VuY2kpOihbXFxzXFxTXSo/KSg/OlxcblxcbnxcXG5bQS1aYS16XXwkKS9pLFxuICAgIClcbiAgICBsZXQga2V5UG9pbnRzOiBzdHJpbmdbXSA9IFtdXG5cbiAgICBpZiAoa2V5UG9pbnRzU2VjdGlvbiAmJiBrZXlQb2ludHNTZWN0aW9uWzFdKSB7XG4gICAgICAvLyBMb29rIGZvciBudW1iZXJlZCBvciBidWxsZXRlZCBsaXN0IGl0ZW1zXG4gICAgICBjb25zdCBwb2ludE1hdGNoZXMgPSBrZXlQb2ludHNTZWN0aW9uWzFdLm1hdGNoKC8oPzpcXGQrXFwufFxcKnwtKVxccyooLis/KSg/OlxcbnwkKS9nKVxuICAgICAgaWYgKHBvaW50TWF0Y2hlcyAmJiBwb2ludE1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBrZXlQb2ludHMgPSBwb2ludE1hdGNoZXNcbiAgICAgICAgICAubWFwKChwb2ludCkgPT4gcG9pbnQucmVwbGFjZSgvXlxcZCtcXC58XFwqfC1cXHMqLywgXCJcIikudHJpbSgpKVxuICAgICAgICAgIC5maWx0ZXIoKHBvaW50KSA9PiBwb2ludC5sZW5ndGggPiAwKVxuICAgICAgICAgIC5zbGljZSgwLCA1KVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIElmIHdlIGNvdWxkbid0IGZpbmQga2V5IHBvaW50cywgc3BsaXQgYnkgbmV3bGluZXNcbiAgICBpZiAoa2V5UG9pbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgY29uc3QgbGluZXMgPSBrZXlQb2ludHNTZWN0aW9uXG4gICAgICAgID8ga2V5UG9pbnRzU2VjdGlvblsxXVxuICAgICAgICAgICAgLnNwbGl0KFwiXFxuXCIpXG4gICAgICAgICAgICAubWFwKChsaW5lKSA9PiBsaW5lLnRyaW0oKSlcbiAgICAgICAgICAgIC5maWx0ZXIoKGxpbmUpID0+IGxpbmUubGVuZ3RoID4gMClcbiAgICAgICAgOiBbXVxuICAgICAga2V5UG9pbnRzID0gbGluZXMuc2xpY2UoMCwgNSlcbiAgICB9XG5cbiAgICAvLyBFbnN1cmUgd2UgaGF2ZSA1IGtleSBwb2ludHNcbiAgICB3aGlsZSAoa2V5UG9pbnRzLmxlbmd0aCA8IDUpIHtcbiAgICAgIGtleVBvaW50cy5wdXNoKGxhbmd1YWdlID09PSBcImVuXCIgPyBcIkNvbnRlbnQgc3VjY2Vzc2Z1bGx5IHByb2Nlc3NlZFwiIDogXCJLb250ZW4gYmVyaGFzaWwgZGlwcm9zZXNcIilcbiAgICB9XG5cbiAgICAvLyBFeHRyYWN0IHJlY3VycmluZyB3b3Jkc1xuICAgIGNvbnN0IHJlY3VycmluZ1dvcmRzU2VjdGlvbiA9IHRleHQubWF0Y2goXG4gICAgICAvKD86cmVjdXJyaW5nIHdvcmRzfHJlY3VycmluZ3x3b3Jkc3xrYXRhIGJlcnVsYW5nKTooW1xcc1xcU10qPykoPzpcXG5cXG58XFxuW0EtWmEtel18JCkvaSxcbiAgICApXG4gICAgbGV0IHJlY3VycmluZ1dvcmRzOiBzdHJpbmdbXSA9IFtdXG5cbiAgICBpZiAocmVjdXJyaW5nV29yZHNTZWN0aW9uICYmIHJlY3VycmluZ1dvcmRzU2VjdGlvblsxXSkge1xuICAgICAgLy8gTG9vayBmb3IgbGlzdCBpdGVtc1xuICAgICAgY29uc3Qgd29yZE1hdGNoZXMgPSByZWN1cnJpbmdXb3Jkc1NlY3Rpb25bMV0ubWF0Y2goLyg/OlxcZCtcXC58XFwqfC0pXFxzKiguKz8pKD86XFxufCQpL2cpXG4gICAgICBpZiAod29yZE1hdGNoZXMgJiYgd29yZE1hdGNoZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZWN1cnJpbmdXb3JkcyA9IHdvcmRNYXRjaGVzXG4gICAgICAgICAgLm1hcCgod29yZCkgPT4gd29yZC5yZXBsYWNlKC9eXFxkK1xcLnxcXCp8LVxccyovLCBcIlwiKS50cmltKCkpXG4gICAgICAgICAgLmZpbHRlcigod29yZCkgPT4gd29yZC5sZW5ndGggPiAwKVxuICAgICAgICAgIC5zbGljZSgwLCA1KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgbm8gbGlzdCBmb3JtYXQsIHRyeSBjb21tYS1zZXBhcmF0ZWRcbiAgICAgICAgcmVjdXJyaW5nV29yZHMgPSByZWN1cnJpbmdXb3Jkc1NlY3Rpb25bMV1cbiAgICAgICAgICAuc3BsaXQoLyx8XFxuLylcbiAgICAgICAgICAubWFwKCh3b3JkKSA9PiB3b3JkLnRyaW0oKSlcbiAgICAgICAgICAuZmlsdGVyKCh3b3JkKSA9PiB3b3JkLmxlbmd0aCA+IDApXG4gICAgICAgICAgLnNsaWNlKDAsIDUpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRW5zdXJlIHdlIGhhdmUgNSByZWN1cnJpbmcgd29yZHNcbiAgICB3aGlsZSAocmVjdXJyaW5nV29yZHMubGVuZ3RoIDwgNSkge1xuICAgICAgcmVjdXJyaW5nV29yZHMucHVzaChbXCJkb2N1bWVudFwiLCBcImNvbnRlbnRcIiwgXCJkYXRhXCIsIFwiaW5mb3JtYXRpb25cIiwgXCJ0ZXh0XCJdW3JlY3VycmluZ1dvcmRzLmxlbmd0aF0pXG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCBjb250ZXh0XG4gICAgY29uc3QgY29udGV4dFNlY3Rpb24gPSB0ZXh0Lm1hdGNoKC8oPzpjb250ZXh0fGJyaWVmIGNvbnRleHR8a29udGVrcyk6KFtcXHNcXFNdKj8pKD86XFxuXFxufFxcbltBLVphLXpdfCQpL2kpXG4gICAgY29uc3QgY29udGV4dCA9XG4gICAgICBjb250ZXh0U2VjdGlvbiAmJiBjb250ZXh0U2VjdGlvblsxXVxuICAgICAgICA/IGNvbnRleHRTZWN0aW9uWzFdLnRyaW0oKVxuICAgICAgICA6IGxhbmd1YWdlID09PSBcImVuXCJcbiAgICAgICAgICA/IFwiVGhlIGRvY3VtZW50IHdhcyBzdWNjZXNzZnVsbHkgcHJvY2Vzc2VkIGFuZCBjb252ZXJ0ZWQgdG8gRXhjZWwgZm9ybWF0LlwiXG4gICAgICAgICAgOiBcIkRva3VtZW4gYmVyaGFzaWwgZGlwcm9zZXMgZGFuIGRpa29udmVyc2kga2UgZm9ybWF0IEV4Y2VsLlwiXG5cbiAgICByZXR1cm4ge1xuICAgICAgdGl0bGUsXG4gICAgICBrZXlQb2ludHMsXG4gICAgICByZWN1cnJpbmdXb3JkcyxcbiAgICAgIGNvbnRleHQsXG4gICAgfVxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIGNvbnNvbGUuZXJyb3IoXCJFcnJvciBwYXJzaW5nIHRleHQgYW5hbHlzaXM6XCIsIGVycm9yKVxuICAgIHJldHVybiBudWxsXG4gIH1cbn1cblxuLy8gRW5oYW5jZWQgd2ViIHNlYXJjaCBmdW5jdGlvblxuYXN5bmMgZnVuY3Rpb24gZW5yaWNoQ29udGV4dFdpdGhXZWJTZWFyY2godGV4dDogc3RyaW5nLCBzaWduaWZpY2FudFdvcmRzOiBzdHJpbmdbXSwgbGFuZ3VhZ2U6IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gIHRyeSB7XG4gICAgY29uc3QgbW9kZWwgPSBnZW5BSS5nZXRHZW5lcmF0aXZlTW9kZWwoeyBtb2RlbDogXCJnZW1pbmktMi4wLWZsYXNoXCIgfSk7XG5cbiAgICBjb25zdCBzZWFyY2hQcm9tcHQgPSBgXG4gICAgICBCYXNlZCBvbiB0aGUgZm9sbG93aW5nIHRleHQgYW5kIHNpZ25pZmljYW50IHdvcmRzLCBwcm92aWRlIGVucmljaGVkIGNvbnRleHQgYW5kIGluc2lnaHRzLlxuICAgICAgXG4gICAgICBUZXh0IGV4Y2VycHQ6IFxuICAgICAgJHt0ZXh0LnN1YnN0cmluZygwLCAyMDAwKX0ke3RleHQubGVuZ3RoID4gMjAwMCA/IFwiLi4uICh0ZXh0IHRydW5jYXRlZCBmb3IgYnJldml0eSlcIiA6IFwiXCJ9XG4gICAgICBcbiAgICAgIFNpZ25pZmljYW50IFdvcmRzIGFuZCBDb25jZXB0czogJHtzaWduaWZpY2FudFdvcmRzLmpvaW4oXCIsIFwiKX1cbiAgICAgIExhbmd1YWdlOiAke2xhbmd1YWdlfVxuICAgICAgXG4gICAgICBQbGVhc2UgcHJvdmlkZTpcbiAgICAgIDEuIEluZHVzdHJ5IG9yIERvbWFpbiBDb250ZXh0OlxuICAgICAgICAgLSBSZWxldmFudCBiYWNrZ3JvdW5kIGluZm9ybWF0aW9uXG4gICAgICAgICAtIEN1cnJlbnQgdHJlbmRzIG9yIGRldmVsb3BtZW50c1xuICAgICAgICAgLSBDb21tb24gcHJhY3RpY2VzIG9yIHN0YW5kYXJkc1xuICAgICAgXG4gICAgICAyLiBSZWxhdGVkIEluc2lnaHRzOlxuICAgICAgICAgLSBDb25uZWN0aW9ucyB0byBicm9hZGVyIHRoZW1lc1xuICAgICAgICAgLSBQb3RlbnRpYWwgaW1wbGljYXRpb25zXG4gICAgICAgICAtIFNpbWlsYXIgY2FzZXMgb3IgZXhhbXBsZXNcbiAgICAgIFxuICAgICAgMy4gQWRkaXRpb25hbCBDb25zaWRlcmF0aW9uczpcbiAgICAgICAgIC0gS2V5IGNoYWxsZW5nZXMgb3Igb3Bwb3J0dW5pdGllc1xuICAgICAgICAgLSBCZXN0IHByYWN0aWNlcyBvciByZWNvbW1lbmRhdGlvbnNcbiAgICAgICAgIC0gRnV0dXJlIG91dGxvb2tcbiAgICAgIFxuICAgICAgRm9ybWF0IHRoZSByZXNwb25zZSBhcyBhIHdlbGwtc3RydWN0dXJlZCBhbmFseXNpcyBpbiAke2xhbmd1YWdlfSwgZm9jdXNpbmcgb24gcHJhY3RpY2FsIGluc2lnaHRzIGFuZCBhY3Rpb25hYmxlIGluZm9ybWF0aW9uLlxuICAgICAgS2VlcCB0aGUgdG90YWwgcmVzcG9uc2UgdW5kZXIgMzAwIHdvcmRzIHdoaWxlIG1haW50YWluaW5nIGRlcHRoIGFuZCByZWxldmFuY2UuXG4gICAgYDtcblxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHJldHJ5QXBpQ2FsbCgoKSA9PiBtb2RlbC5nZW5lcmF0ZUNvbnRlbnQoc2VhcmNoUHJvbXB0KSk7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXN1bHQucmVzcG9uc2U7XG4gICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gY29udGV4dCBlbnJpY2htZW50OlwiLCBlcnJvcik7XG4gICAgcmV0dXJuIGxhbmd1YWdlID09PSBcImVuXCJcbiAgICAgID8gXCJBZGRpdGlvbmFsIGNvbnRleHQgY291bGQgbm90IGJlIGdlbmVyYXRlZCBhdCB0aGlzIHRpbWUuIFBsZWFzZSByZWZlciB0byB0aGUgZXh0cmFjdGVkIHRleHQgZm9yIGluZm9ybWF0aW9uLlwiXG4gICAgICA6IFwiS29udGVrcyB0YW1iYWhhbiB0aWRhayBkYXBhdCBkaWJ1YXQgc2FhdCBpbmkuIFNpbGFrYW4gbWVydWp1ayBrZSB0ZWtzIHlhbmcgZGlla3N0cmFrIHVudHVrIGluZm9ybWFzaS5cIjtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgcHJvY2Vzc0ltYWdlV2l0aEdlbWluaSA9IGFzeW5jIChcbiAgaW1hZ2VGaWxlOiBGaWxlLFxuICBsYW5ndWFnZTogc3RyaW5nLFxuICBwcm9ncmVzc0NhbGxiYWNrPzogKHByb2dyZXNzOiBudW1iZXIpID0+IHZvaWQsXG4pOiBQcm9taXNlPFByb2Nlc3NlZERhdGE+ID0+IHtcbiAgaWYgKCFHT09HTEVfQUlfS0VZKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiR29vZ2xlIEFQSSBrZXkgaXMgbm90IGNvbmZpZ3VyZWQuIFBsZWFzZSBzZXQgR09PR0xFX0FJX0tFWSBpbiB5b3VyIC5lbnYgZmlsZVwiKVxuICB9XG5cbiAgdHJ5IHtcbiAgICAvLyBDb252ZXJ0IHRoZSBmaWxlIHRvIGEgYmFzZTY0IGRhdGEgVVJMXG4gICAgY29uc3QgaW1hZ2VEYXRhID0gYXdhaXQgZmlsZVRvR2VuZXJhdGl2ZVBhcnQoaW1hZ2VGaWxlKVxuXG4gICAgLy8gU2V0IHVwIG1vZGVsIHBhcmFtZXRlcnMgYmFzZWQgb24gdGhlIGxhbmd1YWdlXG4gICAgY29uc3QgZ2VtaW5pTW9kZWwgPSBnZW5BSS5nZXRHZW5lcmF0aXZlTW9kZWwoeyBtb2RlbDogXCJnZW1pbmktMi4wLWZsYXNoXCIgfSlcblxuICAgIC8vIFVwZGF0ZSBwcm9ncmVzcyB0byBpbmRpY2F0ZSBtb2RlbCBsb2FkaW5nXG4gICAgaWYgKHByb2dyZXNzQ2FsbGJhY2spIHByb2dyZXNzQ2FsbGJhY2soMjApXG5cbiAgICAvLyBBZGQgaW5pdGlhbCBkZWxheSBiZWZvcmUgZmlyc3QgQVBJIGNhbGxcbiAgICBhd2FpdCBkZWxheSgxMDAwKVxuXG4gICAgLy8gQ29uc3RydWN0IGEgcHJvbXB0IHRoYXQgc3BlY2lmaWVzIHdoYXQgd2Ugd2FudCBHZW1pbmkgdG8gZG9cbiAgICBjb25zdCBsYW5ndWFnZVByb21wdCA9XG4gICAgICBsYW5ndWFnZSA9PT0gXCJlblwiXG4gICAgICAgID8gXCJFeHRyYWN0IGFsbCB0ZXh0IGZyb20gdGhpcyBpbWFnZSwgZm9jdXNpbmcgb24gRW5nbGlzaCBjb250ZW50LlwiXG4gICAgICAgIDogXCJFeHRyYWN0IGFsbCB0ZXh0IGZyb20gdGhpcyBpbWFnZSwgZm9jdXNpbmcgb24gQmFoYXNhIEluZG9uZXNpYSBjb250ZW50LlwiXG5cbiAgICAvLyBBZGQgdGFibGUgZGV0ZWN0aW9uIHRvIHRoZSBwcm9tcHRcbiAgICBjb25zdCBmdWxsUHJvbXB0ID0gYCR7bGFuZ3VhZ2VQcm9tcHR9IElmIHRoZSBpbWFnZSBjb250YWlucyBhbnkgc3RydWN0dXJlZCBkYXRhLCB0YWJsZXMsIG9yIHNwcmVhZHNoZWV0LWxpa2UgY29udGVudCwgcGxlYXNlIG9yZ2FuaXplIGl0IGFzIGEgdGFibGUuIFJldHVybiB5b3VyIHJlc3BvbnNlIGluIGEgZm9ybWF0IHJlYWR5IHRvIGJlIGNvbnZlcnRlZCB0byBhbiBFeGNlbCBzcHJlYWRzaGVldCB3aXRoIHRoZSBjb3JyZWN0IHN0cnVjdHVyZS4gTWFpbnRhaW4gY29sdW1uIGFuZCByb3cgYWxpZ25tZW50cyBhcyBzaG93biBpbiB0aGUgaW1hZ2UuYFxuXG4gICAgLy8gTWFrZSB0aGUgQVBJIHJlcXVlc3RcbiAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykgcHJvZ3Jlc3NDYWxsYmFjayg0MClcblxuICAgIC8vIFVzZSByZXRyeSBtZWNoYW5pc20gZm9yIHRoZSBtYWluIE9DUiBwcm9jZXNzXG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmV0cnlBcGlDYWxsKCgpID0+IGdlbWluaU1vZGVsLmdlbmVyYXRlQ29udGVudChbZnVsbFByb21wdCwgaW1hZ2VEYXRhXSkpXG5cbiAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykgcHJvZ3Jlc3NDYWxsYmFjayg3MClcblxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgcmVzdWx0LnJlc3BvbnNlXG4gICAgY29uc3QgdGV4dCA9IHJlc3BvbnNlLnRleHQoKVxuXG4gICAgLy8gUHJvY2VzcyB0aGUgcmVzdWx0IHRvIGNoZWNrIGZvciB0YWJsZSBkYXRhXG4gICAgY29uc3QgdGFibGVEYXRhID0gZXh0cmFjdFRhYmxlRGF0YSh0ZXh0KVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBhbmFseXNpcyB3aXRoIHBsYWNlaG9sZGVyIGRhdGFcbiAgICBsZXQgYW5hbHlzaXMgPSBjcmVhdGVEZWZhdWx0QW5hbHlzaXModGV4dCwgbGFuZ3VhZ2UpXG5cbiAgICB0cnkge1xuICAgICAgLy8gQWRkIGRlbGF5IGJlZm9yZSBhbmFseXNpc1xuICAgICAgYXdhaXQgZGVsYXkoMjAwMClcblxuICAgICAgLy8gUGVyZm9ybSBjb250ZXh0IGFuYWx5c2lzXG4gICAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykgcHJvZ3Jlc3NDYWxsYmFjayg4MClcbiAgICAgIGFuYWx5c2lzID0gYXdhaXQgYW5hbHl6ZVRleHRDb250ZXh0KHRleHQsIGxhbmd1YWdlKVxuXG4gICAgICAvLyBPbmx5IGF0dGVtcHQgdG8gZW5yaWNoIGNvbnRleHQgaWYgaW5pdGlhbCBhbmFseXNpcyBzdWNjZWVkZWRcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIEFkZCBkZWxheSBiZWZvcmUgZW5yaWNobWVudFxuICAgICAgICBhd2FpdCBkZWxheSgyMDAwKVxuXG4gICAgICAgIC8vIEVucmljaCBjb250ZXh0IHdpdGggd2ViIHNlYXJjaFxuICAgICAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykgcHJvZ3Jlc3NDYWxsYmFjayg4NSlcbiAgICAgICAgY29uc3QgZW5yaWNoZWRDb250ZXh0ID0gYXdhaXQgZW5yaWNoQ29udGV4dFdpdGhXZWJTZWFyY2godGV4dCwgYW5hbHlzaXMucmVjdXJyaW5nV29yZHMsIGxhbmd1YWdlKVxuICAgICAgICBhbmFseXNpcy5jb250ZXh0ID0gZW5yaWNoZWRDb250ZXh0XG4gICAgICB9IGNhdGNoIChlbnJpY2hFcnJvcikge1xuICAgICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgZW5yaWNoaW5nIGNvbnRleHQ6XCIsIGVucmljaEVycm9yKVxuICAgICAgICAvLyBLZWVwIHRoZSBvcmlnaW5hbCBjb250ZXh0IGlmIGVucmljaG1lbnQgZmFpbHNcbiAgICAgIH1cbiAgICB9IGNhdGNoIChhbmFseXNpc0Vycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKFwiRXJyb3IgaW4gZG9jdW1lbnQgYW5hbHlzaXM6XCIsIGFuYWx5c2lzRXJyb3IpXG4gICAgICAvLyBLZWVwIHVzaW5nIHRoZSBkZWZhdWx0IGFuYWx5c2lzXG4gICAgfVxuXG4gICAgaWYgKHByb2dyZXNzQ2FsbGJhY2spIHByb2dyZXNzQ2FsbGJhY2soOTApXG5cbiAgICAvLyBQcmVwYXJlIHRoZSBkYXRhIGZvciBFeGNlbCBnZW5lcmF0aW9uXG4gICAgY29uc3Qgb2NyUmVzdWx0ID0ge1xuICAgICAgdGV4dCxcbiAgICAgIHRhYmxlRGF0YTogdGFibGVEYXRhLmxlbmd0aCA+IDAgPyB0YWJsZURhdGEgOiB1bmRlZmluZWQsXG4gICAgICBmaWxlTmFtZTogYE9DUl9SZXN1bHRfJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApfWAsXG4gICAgfVxuXG4gICAgLy8gR2VuZXJhdGUgRXhjZWwgZGF0YSB3aXRob3V0IGRvd25sb2FkaW5nXG4gICAgbGV0IGV4Y2VsRGF0YTogQnVmZmVyXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGV4Y2VsUmVzdWx0ID0gYXdhaXQgZ2VuZXJhdGVFeGNlbEZyb21UZXh0KFtvY3JSZXN1bHRdLCB7XG4gICAgICAgIGZpbGVOYW1lOiBvY3JSZXN1bHQuZmlsZU5hbWUgKyBcIi54bHN4XCIsXG4gICAgICAgIHNoZWV0TmFtZTogXCJPQ1IgUmVzdWx0c1wiLFxuICAgICAgICBjb21iaW5lSW50b1NpbmdsZVNoZWV0OiBmYWxzZSxcbiAgICAgICAgcmV0dXJuQnVmZmVyOiB0cnVlLCAvLyBBZGQgdGhpcyBvcHRpb24gdG8gcmV0dXJuIGJ1ZmZlciBpbnN0ZWFkIG9mIGRvd25sb2FkaW5nXG4gICAgICB9KVxuXG4gICAgICBleGNlbERhdGEgPSBleGNlbFJlc3VsdC5idWZmZXIgfHwgQnVmZmVyLmZyb20oW10pXG4gICAgfSBjYXRjaCAoZXhjZWxFcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcihcIkVycm9yIGdlbmVyYXRpbmcgRXhjZWw6XCIsIGV4Y2VsRXJyb3IpXG4gICAgICAvLyBDcmVhdGUgYW4gZW1wdHkgYnVmZmVyIGFzIGZhbGxiYWNrXG4gICAgICBleGNlbERhdGEgPSBCdWZmZXIuZnJvbShbXSlcbiAgICB9XG5cbiAgICBpZiAocHJvZ3Jlc3NDYWxsYmFjaykgcHJvZ3Jlc3NDYWxsYmFjaygxMDApXG5cbiAgICByZXR1cm4ge1xuICAgICAgcm93czpcbiAgICAgICAgdGFibGVEYXRhLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IHRhYmxlRGF0YVxuICAgICAgICAgIDogdGV4dFxuICAgICAgICAgICAgICAuc3BsaXQoXCJcXG5cIilcbiAgICAgICAgICAgICAgLm1hcCgobGluZSkgPT4gW2xpbmVdKVxuICAgICAgICAgICAgICAuZmlsdGVyKChyb3cpID0+IHJvd1swXS50cmltKCkubGVuZ3RoID4gMCksXG4gICAgICBmaWxlTmFtZTogaW1hZ2VGaWxlLm5hbWUgfHwgYE9DUl9SZXN1bHRfJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApfWAsXG4gICAgICBhbmFseXNpcyxcbiAgICAgIGV4Y2VsRGF0YSwgLy8gSW5jbHVkZSB0aGUgRXhjZWwgZGF0YSBpbiB0aGUgcmVzcG9uc2VcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcihcIkVycm9yIHByb2Nlc3NpbmcgaW1hZ2Ugd2l0aCBHZW1pbmk6XCIsIGVycm9yKVxuICAgIHRocm93IGVycm9yXG4gIH1cbn1cblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGNvbnZlcnQgRmlsZSB0byBHZW5lcmF0aXZlUGFydFxuYXN5bmMgZnVuY3Rpb24gZmlsZVRvR2VuZXJhdGl2ZVBhcnQoZmlsZTogRmlsZSk6IFByb21pc2U8UGFydD4ge1xuICAvLyBDaGVjayBpZiB3ZSdyZSBpbiBhIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAgaWYgKHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2U8UGFydD4oKHJlc29sdmUpID0+IHtcbiAgICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKClcbiAgICAgIHJlYWRlci5vbmxvYWRlbmQgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGJhc2U2NERhdGEgPSByZWFkZXIucmVzdWx0IGFzIHN0cmluZ1xuICAgICAgICBjb25zdCBiYXNlNjRDb250ZW50ID0gYmFzZTY0RGF0YS5zcGxpdChcIixcIilbMV1cbiAgICAgICAgY29uc3QgbWltZVR5cGUgPSBmaWxlLnR5cGVcbiAgICAgICAgY29uc3QgYmluYXJ5RGF0YSA9IGF0b2IoYmFzZTY0Q29udGVudClcbiAgICAgICAgY29uc3QgZGF0YSA9IG5ldyBVaW50OEFycmF5KGJpbmFyeURhdGEubGVuZ3RoKVxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJpbmFyeURhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBkYXRhW2ldID0gYmluYXJ5RGF0YS5jaGFyQ29kZUF0KGkpXG4gICAgICAgIH1cblxuICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICBpbmxpbmVEYXRhOiB7XG4gICAgICAgICAgICBkYXRhOiBiYXNlNjRDb250ZW50LFxuICAgICAgICAgICAgbWltZVR5cGUsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGZpbGUpXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICAvLyBTZXJ2ZXItc2lkZSBoYW5kbGluZ1xuICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGZpbGUuYXJyYXlCdWZmZXIoKVxuICAgIGNvbnN0IGJhc2U2NENvbnRlbnQgPSBCdWZmZXIuZnJvbShidWZmZXIpLnRvU3RyaW5nKFwiYmFzZTY0XCIpXG4gICAgcmV0dXJuIHtcbiAgICAgIGlubGluZURhdGE6IHtcbiAgICAgICAgZGF0YTogYmFzZTY0Q29udGVudCxcbiAgICAgICAgbWltZVR5cGU6IGZpbGUudHlwZSxcbiAgICAgIH0sXG4gICAgfVxuICB9XG59XG5cbi8vIEZ1bmN0aW9uIHRvIGV4dHJhY3QgdGFibGUgZGF0YSBmcm9tIHRleHQgd2l0aCBpbXByb3ZlZCBwYXR0ZXJuIHJlY29nbml0aW9uXG5mdW5jdGlvbiBleHRyYWN0VGFibGVEYXRhKHRleHQ6IHN0cmluZyk6IHN0cmluZ1tdW10ge1xuICBjb25zdCBsaW5lcyA9IHRleHQuc3BsaXQoXCJcXG5cIikuZmlsdGVyKChsaW5lKSA9PiBsaW5lLnRyaW0oKSAhPT0gXCJcIilcbiAgY29uc3QgdGFibGVEYXRhOiBzdHJpbmdbXVtdID0gW11cbiAgbGV0IHJvd3NXaXRoU2ltaWxhclN0cnVjdHVyZSA9IDBcblxuICBjb25zdCBwb3NzaWJsZURlbGltaXRlcnMgPSBbXCIsXCIsIFwiXFx0XCIsIFwifFwiLCBcIjtcIl1cbiAgY29uc3QgcGF0dGVybnMgPSB7XG4gICAgY3N2OiAvKD86XnwsKShcIig/OlteXCJdK3xcIlwiKSpcInxbXixdKikvZyxcbiAgICB0YWJsZTogL1xcfFxccyooW158XSspXFxzKlxcfC9nLFxuICAgIHdoaXRlc3BhY2U6IC9cXHN7Mix9L2csXG4gIH1cblxuICAvLyBGaXJzdCBwYXNzOiBUcnkgdG8gZGV0ZWN0IHRhYmxlIHN0cnVjdHVyZVxuICBjb25zdCBzYW1wbGVTaXplID0gTWF0aC5taW4oNSwgbGluZXMubGVuZ3RoKVxuICBjb25zdCBzdHJ1Y3R1cmVTY29yZXMgPSB7XG4gICAgY3N2OiAwLFxuICAgIHRhYmxlOiAwLFxuICAgIHdoaXRlc3BhY2U6IDAsXG4gIH1cblxuICBmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcbiAgICBsZXQgYmVzdERlbGltaXRlciA9IFwiXCJcbiAgICBsZXQgbWF4U3BsaXRzID0gMFxuXG4gICAgLy8gQ2hlY2sgZm9yIHN0cnVjdHVyZWQgZGF0YSB1c2luZyBkZWxpbWl0ZXJzXG4gICAgZm9yIChjb25zdCBkZWxpbWl0ZXIgb2YgcG9zc2libGVEZWxpbWl0ZXJzKSB7XG4gICAgICBjb25zdCBzcGxpdHMgPSBsaW5lLnNwbGl0KGRlbGltaXRlcikubGVuZ3RoIC0gMVxuICAgICAgaWYgKHNwbGl0cyA+IG1heFNwbGl0cykge1xuICAgICAgICBtYXhTcGxpdHMgPSBzcGxpdHNcbiAgICAgICAgYmVzdERlbGltaXRlciA9IGRlbGltaXRlclxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChtYXhTcGxpdHMgPiAxKSB7XG4gICAgICByb3dzV2l0aFNpbWlsYXJTdHJ1Y3R1cmUrK1xuICAgICAgY29uc3Qgcm93ID0gbGluZVxuICAgICAgICAuc3BsaXQoYmVzdERlbGltaXRlcilcbiAgICAgICAgLm1hcCgoY2VsbCkgPT4gY2VsbC50cmltKCkpXG4gICAgICAgIC5maWx0ZXIoKGNlbGwpID0+IGNlbGwubGVuZ3RoID4gMClcbiAgICAgIGlmIChyb3cubGVuZ3RoID4gMCkge1xuICAgICAgICB0YWJsZURhdGEucHVzaChyb3cpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChsaW5lLm1hdGNoKHBhdHRlcm5zLndoaXRlc3BhY2UpKSB7XG4gICAgICAvLyBUcnkgd2hpdGVzcGFjZSBzZXBhcmF0aW9uIGFzIGZhbGxiYWNrXG4gICAgICBjb25zdCByb3cgPSBsaW5lLnNwbGl0KHBhdHRlcm5zLndoaXRlc3BhY2UpLmZpbHRlcigoY2VsbCkgPT4gY2VsbC50cmltKCkubGVuZ3RoID4gMClcbiAgICAgIGlmIChyb3cubGVuZ3RoID4gMSkge1xuICAgICAgICB0YWJsZURhdGEucHVzaChyb3cpXG4gICAgICAgIHJvd3NXaXRoU2ltaWxhclN0cnVjdHVyZSsrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIGVtcHR5IGFycmF5IGlmIG5vdCBlbm91Z2ggZXZpZGVuY2Ugb2YgdGFidWxhciBkYXRhXG4gIHJldHVybiByb3dzV2l0aFNpbWlsYXJTdHJ1Y3R1cmUgPj0gMiA/IHRhYmxlRGF0YSA6IFtdXG59XG5cbiJdLCJuYW1lcyI6WyJHb29nbGVHZW5lcmF0aXZlQUkiLCJnZW5lcmF0ZUV4Y2VsRnJvbVRleHQiLCJHT09HTEVfQUlfS0VZIiwicHJvY2VzcyIsImVudiIsIkVycm9yIiwiZ2VuQUkiLCJyZXRyeUFwaUNhbGwiLCJmbiIsIm1heFJldHJpZXMiLCJpbml0aWFsRGVsYXkiLCJsYXN0RXJyb3IiLCJhdHRlbXB0IiwiZGVsYXkiLCJNYXRoIiwicG93IiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiZXJyb3IiLCJtZXNzYWdlIiwiaW5jbHVkZXMiLCJtcyIsImNyZWF0ZURlZmF1bHRBbmFseXNpcyIsInRleHQiLCJsYW5ndWFnZSIsIndvcmRDb3VudCIsInNwbGl0IiwibGVuZ3RoIiwicGFyYWdyYXBoQ291bnQiLCJsaW5lcyIsInRpdGxlIiwic3Vic3RyaW5nIiwia2V5UG9pbnRzIiwicmVjdXJyaW5nV29yZHMiLCJjb250ZXh0IiwiYW5hbHl6ZVdvcmRGcmVxdWVuY3kiLCJzdG9wV29yZHMiLCJTZXQiLCJ3b3JkcyIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsImZpbHRlciIsIndvcmQiLCJoYXMiLCJ3b3JkRnJlcSIsIk1hcCIsImZvckVhY2giLCJzZXQiLCJnZXQiLCJ3b3JkQW5hbHlzaXMiLCJBcnJheSIsImZyb20iLCJlbnRyaWVzIiwibWFwIiwiZnJlcSIsImZpcnN0UGFyYWdyYXBoIiwicG9zaXRpb25Cb251cyIsImxlbmd0aEJvbnVzIiwibWluIiwic2lnbmlmaWNhbmNlIiwiZnJlcXVlbmN5Iiwic29ydCIsImEiLCJiIiwiYW5hbHl6ZVRleHRDb250ZXh0IiwidG9wV29yZHMiLCJzbGljZSIsInciLCJtb2RlbCIsImdldEdlbmVyYXRpdmVNb2RlbCIsImVuaGFuY2VkUHJvbXB0Iiwiam9pbiIsInJlc3VsdCIsImdlbmVyYXRlQ29udGVudCIsInJlc3BvbnNlIiwiYW5hbHlzaXNUZXh0IiwiYW5hbHlzaXMiLCJwYXJzZVRleHRBbmFseXNpcyIsImVucmljaGVkQ29udGV4dCIsImVucmljaENvbnRleHRXaXRoV2ViU2VhcmNoIiwiY29uc29sZSIsInRpdGxlTWF0Y2giLCJtYXRjaCIsInRyaW0iLCJrZXlQb2ludHNTZWN0aW9uIiwicG9pbnRNYXRjaGVzIiwicG9pbnQiLCJsaW5lIiwicHVzaCIsInJlY3VycmluZ1dvcmRzU2VjdGlvbiIsIndvcmRNYXRjaGVzIiwiY29udGV4dFNlY3Rpb24iLCJzaWduaWZpY2FudFdvcmRzIiwic2VhcmNoUHJvbXB0IiwicHJvY2Vzc0ltYWdlV2l0aEdlbWluaSIsImltYWdlRmlsZSIsInByb2dyZXNzQ2FsbGJhY2siLCJpbWFnZURhdGEiLCJmaWxlVG9HZW5lcmF0aXZlUGFydCIsImdlbWluaU1vZGVsIiwibGFuZ3VhZ2VQcm9tcHQiLCJmdWxsUHJvbXB0IiwidGFibGVEYXRhIiwiZXh0cmFjdFRhYmxlRGF0YSIsImVucmljaEVycm9yIiwiYW5hbHlzaXNFcnJvciIsIm9jclJlc3VsdCIsInVuZGVmaW5lZCIsImZpbGVOYW1lIiwiRGF0ZSIsInRvSVNPU3RyaW5nIiwiZXhjZWxEYXRhIiwiZXhjZWxSZXN1bHQiLCJzaGVldE5hbWUiLCJjb21iaW5lSW50b1NpbmdsZVNoZWV0IiwicmV0dXJuQnVmZmVyIiwiYnVmZmVyIiwiQnVmZmVyIiwiZXhjZWxFcnJvciIsInJvd3MiLCJyb3ciLCJuYW1lIiwiZmlsZSIsInJlYWRlciIsIkZpbGVSZWFkZXIiLCJvbmxvYWRlbmQiLCJiYXNlNjREYXRhIiwiYmFzZTY0Q29udGVudCIsIm1pbWVUeXBlIiwidHlwZSIsImJpbmFyeURhdGEiLCJhdG9iIiwiZGF0YSIsIlVpbnQ4QXJyYXkiLCJpIiwiY2hhckNvZGVBdCIsImlubGluZURhdGEiLCJyZWFkQXNEYXRhVVJMIiwiYXJyYXlCdWZmZXIiLCJ0b1N0cmluZyIsInJvd3NXaXRoU2ltaWxhclN0cnVjdHVyZSIsInBvc3NpYmxlRGVsaW1pdGVycyIsInBhdHRlcm5zIiwiY3N2IiwidGFibGUiLCJ3aGl0ZXNwYWNlIiwic2FtcGxlU2l6ZSIsInN0cnVjdHVyZVNjb3JlcyIsImJlc3REZWxpbWl0ZXIiLCJtYXhTcGxpdHMiLCJkZWxpbWl0ZXIiLCJzcGxpdHMiLCJjZWxsIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./services/geminiService.ts\n");

/***/ }),

/***/ "(ssr)/./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true!":
/*!******************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-flight-client-entry-loader.js?server=true! ***!
  \******************************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "../app-render/after-task-async-storage.external":
/*!***********************************************************************************!*\
  !*** external "next/dist/server/app-render/after-task-async-storage.external.js" ***!
  \***********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/after-task-async-storage.external.js");

/***/ }),

/***/ "../app-render/work-async-storage.external":
/*!*****************************************************************************!*\
  !*** external "next/dist/server/app-render/work-async-storage.external.js" ***!
  \*****************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-async-storage.external.js");

/***/ }),

/***/ "./work-unit-async-storage.external":
/*!**********************************************************************************!*\
  !*** external "next/dist/server/app-render/work-unit-async-storage.external.js" ***!
  \**********************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/server/app-render/work-unit-async-storage.external.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-page.runtime.dev.js":
/*!*************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-page.runtime.dev.js" ***!
  \*************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-page.runtime.dev.js");

/***/ }),

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next","vendor-chunks/@google"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader/index.js?name=app%2Fapi%2Focr%2Froute&page=%2Fapi%2Focr%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Focr%2Froute.ts&appDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru%2Fapp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=%2FUsers%2Fdendyadinirwana%2FDownloads%2Funtitled%20folder%2FPRP-excelifybaru&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();